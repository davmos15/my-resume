import { c as createComponent, a as createAstro, m as maybeRenderHead, b as addAttribute, f as renderTemplate, e as renderScript, g as renderComponent, h as defineScriptVars } from '../chunks/astro/server_C1lm3gvy.mjs';
import 'kleur/colors';
import { $ as $$BaseLayout } from '../chunks/BaseLayout_DB5JEVk1.mjs';
import 'clsx';
import { d as db } from '../chunks/db-init_BmxtR14B.mjs';
/* empty css                                    */
export { renderers } from '../renderers.mjs';

const $$Astro = createAstro();
const $$ProjectCard = createComponent(($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$ProjectCard;
  const { project } = Astro2.props;
  return renderTemplate`${maybeRenderHead()}<div class="project-card"${addAttribute(project.id, "data-project-id")}> <div class="project-card-hover-overlay"> <span class="view-project-text">View Project</span> </div> <div class="project-card-inner"> ${project.emoji && renderTemplate`<span class="project-card-emoji">${project.emoji}</span>`} <h3 class="project-card-title">${project.name}</h3> ${project.subtitle && renderTemplate`<p class="project-card-subtitle">${project.subtitle}</p>`} </div> </div>`;
}, "/home/davmosk/projects/my-resume/src/components/ProjectCard.astro", void 0);

const $$ProjectModal = createComponent(($$result, $$props, $$slots) => {
  return renderTemplate`${maybeRenderHead()}<div id="projectModal" class="project-modal"> <div class="project-modal-content"> <button class="modal-close" aria-label="Close modal"> <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"> <path d="M15 5L5 15M5 5L15 15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path> </svg> </button> <div id="modalProjectContent"> <!-- Content will be dynamically inserted here --> </div> </div> </div> ${renderScript($$result, "/home/davmosk/projects/my-resume/src/components/ProjectModal.astro?astro&type=script&index=0&lang.ts")}`;
}, "/home/davmosk/projects/my-resume/src/components/ProjectModal.astro", void 0);

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Projects = createComponent(($$result, $$props, $$slots) => {
  let projects = [];
  let error = null;
  try {
    const stmt = db.prepare("SELECT * FROM projects WHERE is_active = 1 ORDER BY display_order, id DESC");
    const rawProjects = stmt.all();
    projects = rawProjects.map((project, index) => ({
      id: project.id || index,
      name: project.title,
      description: project.description,
      technologies: project.technologies || "",
      github_link: project.github_link || "",
      demo_link: project.live_link || "",
      emoji: project.emoji || "\u{1F680}",
      image_url: project.image_path || "",
      subtitle: project.subtitle || "",
      // Additional fields for modal
      overview: project.subtitle || (project.description ? project.description.substring(0, 150) + "..." : "An innovative project showcasing cutting-edge technologies and best practices."),
      achievements: [
        "Implemented core functionality with modern best practices",
        "Optimized performance for enhanced user experience",
        "Integrated responsive design for all devices",
        "Achieved 100% test coverage"
      ],
      timeline: "2024",
      team_size: index % 4 + 1
    }));
  } catch (err) {
    console.error("Error fetching projects:", err);
    error = err.message;
  }
  return renderTemplate`${renderComponent($$result, "BaseLayout", $$BaseLayout, { "title": "Projects - Nadav Moskow", "data-astro-cid-aid3sr62": true }, { "default": ($$result2) => renderTemplate(_a || (_a = __template([" ", '<div id="projects-dashboard" data-astro-cid-aid3sr62> ', " </div>  ", "  <script>(function(){", "\n    // Project Modal Manager - Matching the resume modal implementation\n    class ProjectModalManager {\n      constructor(modalElement) {\n        this.modal = modalElement;\n        this.modalContent = modalElement.querySelector('.project-modal-content');\n        this.modalClose = modalElement.querySelector('.modal-close');\n        \n        this.isOpen = false;\n        this.previousFocus = null;\n        this.scrollPosition = 0;\n        this.currentProject = null;\n        \n        // Store projects data\n        this.projectsData = projects;\n        \n        // Bind methods\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.handleKeydown = this.handleKeydown.bind(this);\n        this.handleOverlayClick = this.handleOverlayClick.bind(this);\n        \n        // Initialize\n        this.init();\n      }\n      \n      init() {\n        // Close button handler\n        this.modalClose?.addEventListener('click', this.close);\n        \n        // Overlay click handler\n        this.modal.addEventListener('click', this.handleOverlayClick);\n        \n        // Prevent clicks inside modal from closing\n        this.modalContent?.addEventListener('click', (e) => {\n          e.stopPropagation();\n        });\n        \n        // Set ARIA attributes\n        this.modal.setAttribute('role', 'dialog');\n        this.modal.setAttribute('aria-modal', 'true');\n        this.modalClose?.setAttribute('aria-label', 'Close modal');\n      }\n      \n      open(projectId) {\n        const project = this.projectsData.find(p => p.id == projectId);\n        if (this.isOpen || !project) return;\n        \n        // Store current state\n        this.previousFocus = document.activeElement;\n        this.scrollPosition = window.scrollY;\n        this.currentProject = project;\n        \n        // Update modal content\n        this.updateModalContent(project);\n        \n        // Open modal\n        this.isOpen = true;\n        this.modal.classList.add('show');\n        document.body.style.overflow = 'hidden';\n        \n        // Add keyboard listener\n        document.addEventListener('keydown', this.handleKeydown);\n        \n        // Set focus to first focusable element\n        setTimeout(() => {\n          const firstFocusable = this.modal.querySelector(\n            'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n          );\n          firstFocusable?.focus();\n        }, 50);\n        \n        // Dispatch event\n        this.modal.dispatchEvent(new CustomEvent('project-modal-opened', { \n          detail: { project } \n        }));\n      }\n      \n      close() {\n        if (!this.isOpen) return;\n        \n        // Close modal\n        this.isOpen = false;\n        this.modal.classList.remove('show');\n        document.body.style.overflow = '';\n        \n        // Remove keyboard listener\n        document.removeEventListener('keydown', this.handleKeydown);\n        \n        // Restore focus\n        if (this.previousFocus) {\n          this.previousFocus.focus();\n        }\n        \n        // Dispatch event\n        this.modal.dispatchEvent(new CustomEvent('project-modal-closed', { \n          detail: { project: this.currentProject } \n        }));\n        \n        this.currentProject = null;\n      }\n      \n      handleKeydown(e) {\n        if (e.key === 'Escape') {\n          this.close();\n        }\n        \n        // Tab trap\n        if (e.key === 'Tab') {\n          const focusableElements = this.modal.querySelectorAll(\n            'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n          );\n          \n          if (focusableElements.length === 0) return;\n          \n          const firstFocusable = focusableElements[0];\n          const lastFocusable = focusableElements[focusableElements.length - 1];\n          \n          if (e.shiftKey && document.activeElement === firstFocusable) {\n            e.preventDefault();\n            lastFocusable.focus();\n          } else if (!e.shiftKey && document.activeElement === lastFocusable) {\n            e.preventDefault();\n            firstFocusable.focus();\n          }\n        }\n      }\n      \n      handleOverlayClick(e) {\n        if (e.target === this.modal) {\n          this.close();\n        }\n      }\n      \n      updateModalContent(project) {\n        // Update all modal content elements\n        const elements = {\n          name: this.modal.querySelector('[data-project-name]'),\n          description: this.modal.querySelector('[data-project-description]'),\n          overview: this.modal.querySelector('[data-project-overview]'),\n          technologies: this.modal.querySelector('[data-project-technologies]'),\n          achievements: this.modal.querySelector('[data-project-achievements]'),\n          timeline: this.modal.querySelector('[data-project-timeline]'),\n          teamSize: this.modal.querySelector('[data-project-team-size]'),\n          githubLink: this.modal.querySelector('[data-github-link]'),\n          demoLink: this.modal.querySelector('[data-demo-link]'),\n          image: this.modal.querySelector('[data-project-image]')\n        };\n        \n        // Update text content\n        if (elements.name) elements.name.textContent = project.name;\n        if (elements.description) elements.description.textContent = project.description;\n        if (elements.overview) elements.overview.textContent = project.overview;\n        if (elements.technologies) elements.technologies.textContent = project.technologies;\n        if (elements.timeline) elements.timeline.textContent = project.timeline;\n        if (elements.teamSize) elements.teamSize.textContent = project.team_size;\n        \n        // Update achievements list\n        if (elements.achievements && project.achievements) {\n          elements.achievements.innerHTML = project.achievements\n            .map(achievement => `<li>${achievement}</li>`)\n            .join('');\n        }\n        \n        // Update links\n        if (elements.githubLink) {\n          elements.githubLink.href = project.github_link || '#';\n          elements.githubLink.style.display = project.github_link ? 'inline-flex' : 'none';\n        }\n        if (elements.demoLink) {\n          elements.demoLink.href = project.demo_link || '#';\n          elements.demoLink.style.display = project.demo_link ? 'inline-flex' : 'none';\n        }\n        \n        // Update image\n        if (elements.image && project.image_url) {\n          elements.image.src = project.image_url;\n          elements.image.alt = project.name;\n        }\n        \n        // Set title for accessibility\n        const modalTitle = this.modal.querySelector('.modal-header h2');\n        if (modalTitle) {\n          modalTitle.id = 'modal-title';\n          this.modal.setAttribute('aria-labelledby', 'modal-title');\n        }\n      }\n    }\n    \n    // Initialize when DOM is ready\n    function initializeProjectsPage() {\n      const modal = document.getElementById('project-modal');\n      if (!modal) {\n        console.error('Project modal element not found');\n        return;\n      }\n      \n      // Create modal manager\n      const modalManager = new ProjectModalManager(modal);\n      \n      // Attach click handlers to all project cards\n      const projectCards = document.querySelectorAll('.project-card');\n      projectCards.forEach(card => {\n        card.addEventListener('click', function(e) {\n          // Prevent clicks on links from opening modal\n          if (e.target.tagName === 'A' || e.target.closest('a')) return;\n          \n          e.preventDefault();\n          const projectId = card.dataset.projectId;\n          modalManager.open(projectId);\n        });\n        \n        // Add keyboard support\n        card.setAttribute('tabindex', '0');\n        card.setAttribute('role', 'button');\n        card.setAttribute('aria-label', `View ${card.querySelector('.project-title')?.textContent || 'project'} details`);\n        \n        card.addEventListener('keydown', function(e) {\n          if (e.key === 'Enter' || e.key === ' ') {\n            e.preventDefault();\n            const projectId = card.dataset.projectId;\n            modalManager.open(projectId);\n          }\n        });\n      });\n      \n      console.log('Projects page initialized with modal manager');\n    }\n    \n    // Initialize immediately since script is at end of body\n    initializeProjectsPage();\n  })();<\/script> "], [" ", '<div id="projects-dashboard" data-astro-cid-aid3sr62> ', " </div>  ", "  <script>(function(){", "\n    // Project Modal Manager - Matching the resume modal implementation\n    class ProjectModalManager {\n      constructor(modalElement) {\n        this.modal = modalElement;\n        this.modalContent = modalElement.querySelector('.project-modal-content');\n        this.modalClose = modalElement.querySelector('.modal-close');\n        \n        this.isOpen = false;\n        this.previousFocus = null;\n        this.scrollPosition = 0;\n        this.currentProject = null;\n        \n        // Store projects data\n        this.projectsData = projects;\n        \n        // Bind methods\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.handleKeydown = this.handleKeydown.bind(this);\n        this.handleOverlayClick = this.handleOverlayClick.bind(this);\n        \n        // Initialize\n        this.init();\n      }\n      \n      init() {\n        // Close button handler\n        this.modalClose?.addEventListener('click', this.close);\n        \n        // Overlay click handler\n        this.modal.addEventListener('click', this.handleOverlayClick);\n        \n        // Prevent clicks inside modal from closing\n        this.modalContent?.addEventListener('click', (e) => {\n          e.stopPropagation();\n        });\n        \n        // Set ARIA attributes\n        this.modal.setAttribute('role', 'dialog');\n        this.modal.setAttribute('aria-modal', 'true');\n        this.modalClose?.setAttribute('aria-label', 'Close modal');\n      }\n      \n      open(projectId) {\n        const project = this.projectsData.find(p => p.id == projectId);\n        if (this.isOpen || !project) return;\n        \n        // Store current state\n        this.previousFocus = document.activeElement;\n        this.scrollPosition = window.scrollY;\n        this.currentProject = project;\n        \n        // Update modal content\n        this.updateModalContent(project);\n        \n        // Open modal\n        this.isOpen = true;\n        this.modal.classList.add('show');\n        document.body.style.overflow = 'hidden';\n        \n        // Add keyboard listener\n        document.addEventListener('keydown', this.handleKeydown);\n        \n        // Set focus to first focusable element\n        setTimeout(() => {\n          const firstFocusable = this.modal.querySelector(\n            'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n          );\n          firstFocusable?.focus();\n        }, 50);\n        \n        // Dispatch event\n        this.modal.dispatchEvent(new CustomEvent('project-modal-opened', { \n          detail: { project } \n        }));\n      }\n      \n      close() {\n        if (!this.isOpen) return;\n        \n        // Close modal\n        this.isOpen = false;\n        this.modal.classList.remove('show');\n        document.body.style.overflow = '';\n        \n        // Remove keyboard listener\n        document.removeEventListener('keydown', this.handleKeydown);\n        \n        // Restore focus\n        if (this.previousFocus) {\n          this.previousFocus.focus();\n        }\n        \n        // Dispatch event\n        this.modal.dispatchEvent(new CustomEvent('project-modal-closed', { \n          detail: { project: this.currentProject } \n        }));\n        \n        this.currentProject = null;\n      }\n      \n      handleKeydown(e) {\n        if (e.key === 'Escape') {\n          this.close();\n        }\n        \n        // Tab trap\n        if (e.key === 'Tab') {\n          const focusableElements = this.modal.querySelectorAll(\n            'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n          );\n          \n          if (focusableElements.length === 0) return;\n          \n          const firstFocusable = focusableElements[0];\n          const lastFocusable = focusableElements[focusableElements.length - 1];\n          \n          if (e.shiftKey && document.activeElement === firstFocusable) {\n            e.preventDefault();\n            lastFocusable.focus();\n          } else if (!e.shiftKey && document.activeElement === lastFocusable) {\n            e.preventDefault();\n            firstFocusable.focus();\n          }\n        }\n      }\n      \n      handleOverlayClick(e) {\n        if (e.target === this.modal) {\n          this.close();\n        }\n      }\n      \n      updateModalContent(project) {\n        // Update all modal content elements\n        const elements = {\n          name: this.modal.querySelector('[data-project-name]'),\n          description: this.modal.querySelector('[data-project-description]'),\n          overview: this.modal.querySelector('[data-project-overview]'),\n          technologies: this.modal.querySelector('[data-project-technologies]'),\n          achievements: this.modal.querySelector('[data-project-achievements]'),\n          timeline: this.modal.querySelector('[data-project-timeline]'),\n          teamSize: this.modal.querySelector('[data-project-team-size]'),\n          githubLink: this.modal.querySelector('[data-github-link]'),\n          demoLink: this.modal.querySelector('[data-demo-link]'),\n          image: this.modal.querySelector('[data-project-image]')\n        };\n        \n        // Update text content\n        if (elements.name) elements.name.textContent = project.name;\n        if (elements.description) elements.description.textContent = project.description;\n        if (elements.overview) elements.overview.textContent = project.overview;\n        if (elements.technologies) elements.technologies.textContent = project.technologies;\n        if (elements.timeline) elements.timeline.textContent = project.timeline;\n        if (elements.teamSize) elements.teamSize.textContent = project.team_size;\n        \n        // Update achievements list\n        if (elements.achievements && project.achievements) {\n          elements.achievements.innerHTML = project.achievements\n            .map(achievement => \\`<li>\\${achievement}</li>\\`)\n            .join('');\n        }\n        \n        // Update links\n        if (elements.githubLink) {\n          elements.githubLink.href = project.github_link || '#';\n          elements.githubLink.style.display = project.github_link ? 'inline-flex' : 'none';\n        }\n        if (elements.demoLink) {\n          elements.demoLink.href = project.demo_link || '#';\n          elements.demoLink.style.display = project.demo_link ? 'inline-flex' : 'none';\n        }\n        \n        // Update image\n        if (elements.image && project.image_url) {\n          elements.image.src = project.image_url;\n          elements.image.alt = project.name;\n        }\n        \n        // Set title for accessibility\n        const modalTitle = this.modal.querySelector('.modal-header h2');\n        if (modalTitle) {\n          modalTitle.id = 'modal-title';\n          this.modal.setAttribute('aria-labelledby', 'modal-title');\n        }\n      }\n    }\n    \n    // Initialize when DOM is ready\n    function initializeProjectsPage() {\n      const modal = document.getElementById('project-modal');\n      if (!modal) {\n        console.error('Project modal element not found');\n        return;\n      }\n      \n      // Create modal manager\n      const modalManager = new ProjectModalManager(modal);\n      \n      // Attach click handlers to all project cards\n      const projectCards = document.querySelectorAll('.project-card');\n      projectCards.forEach(card => {\n        card.addEventListener('click', function(e) {\n          // Prevent clicks on links from opening modal\n          if (e.target.tagName === 'A' || e.target.closest('a')) return;\n          \n          e.preventDefault();\n          const projectId = card.dataset.projectId;\n          modalManager.open(projectId);\n        });\n        \n        // Add keyboard support\n        card.setAttribute('tabindex', '0');\n        card.setAttribute('role', 'button');\n        card.setAttribute('aria-label', \\`View \\${card.querySelector('.project-title')?.textContent || 'project'} details\\`);\n        \n        card.addEventListener('keydown', function(e) {\n          if (e.key === 'Enter' || e.key === ' ') {\n            e.preventDefault();\n            const projectId = card.dataset.projectId;\n            modalManager.open(projectId);\n          }\n        });\n      });\n      \n      console.log('Projects page initialized with modal manager');\n    }\n    \n    // Initialize immediately since script is at end of body\n    initializeProjectsPage();\n  })();<\/script> "])), maybeRenderHead(), error ? renderTemplate`<div class="error-message" data-astro-cid-aid3sr62> <p data-astro-cid-aid3sr62>Error loading projects: ${error}</p> </div>` : renderTemplate`<div class="projects-grid" data-astro-cid-aid3sr62> ${projects.map((project) => renderTemplate`${renderComponent($$result2, "ProjectCard", $$ProjectCard, { "project": project, "data-astro-cid-aid3sr62": true })}`)} </div>`, renderComponent($$result2, "ProjectModal", $$ProjectModal, { "data-astro-cid-aid3sr62": true }), defineScriptVars({ projects })) })} `;
}, "/home/davmosk/projects/my-resume/src/pages/projects.astro", void 0);

const $$file = "/home/davmosk/projects/my-resume/src/pages/projects.astro";
const $$url = "/projects";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$Projects,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
