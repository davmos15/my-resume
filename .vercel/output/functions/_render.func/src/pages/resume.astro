---
import BaseLayout from '../layouts/BaseLayout.astro';
import db from '../lib/db.js';

// Initialize variables
let groupedSections = {};
let error = null;
let stats = { years: 0, companies: 0, roles: 0 };

try {
    // Fetch resume items from database grouped by type
    const sections = db.prepare(`
        SELECT * FROM resume_sections 
        WHERE is_active = 1 
        ORDER BY section_type, display_order
    `).all();

    // Group sections by type
    groupedSections = sections.reduce((acc, section) => {
        if (!acc[section.section_type]) {
            acc[section.section_type] = [];
        }
        acc[section.section_type].push({
            id: section.id,
            type: section.section_type,
            title: section.title,
            subtitle: section.subtitle,
            date_range: section.date_range,
            description: section.description,
            details: section.details
        });
        return acc;
    }, {});

    // Calculate stats for summary section
    let companies = new Set();
    let oldestDate = new Date();
    let yearsExp = 0;

    if (groupedSections.experience && groupedSections.experience.length > 0) {
        groupedSections.experience.forEach(job => {
            if (job.subtitle) {
                const company = job.subtitle.split(' - ')[0];
                companies.add(company);
            }
            if (job.date_range) {
                const dateMatch = job.date_range.match(/(\d{4})/);
                if (dateMatch) {
                    const year = parseInt(dateMatch[1]);
                    const jobDate = new Date(year, 0, 1);
                    if (jobDate < oldestDate) oldestDate = jobDate;
                }
            }
        });
        yearsExp = new Date().getFullYear() - oldestDate.getFullYear();
    }

    stats = {
        years: yearsExp > 0 ? yearsExp : 1,
        companies: companies.size,
        roles: groupedSections.experience ? groupedSections.experience.length : 0
    };
} catch (err) {
    console.error('Error fetching resume sections:', err);
    error = err.message;
}
---

<BaseLayout title="Resume - Nadav Moskow">
    <link rel="stylesheet" href="/css/inline-expansion.css">
    
    <div id="resume-dashboard">
        {error ? (
            <div class="error-message">
                <p>Error loading resume data: {error}</p>
            </div>
        ) : (
            <>
        <!-- Professional Summary Section -->
        <div class="summary-stats-section">
            <div class="summary-stats" 
                 data-years={stats.years}
                 data-companies={stats.companies}
                 data-roles={stats.roles}>
                <div class="stat-item">
                    <div class="stat-number" id="years-exp">0</div>
                    <div class="stat-label">Years Experience</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="companies-count">0</div>
                    <div class="stat-label">Companies</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="roles-count">0</div>
                    <div class="stat-label">Roles</div>
                </div>
            </div>
            
            <!-- Download Button -->
            <a href="/images/Nadav Moskow - Resume.pdf" target="_blank" download>
                <button class="download-btn">
                    <span>üìÑ</span>
                    Download PDF Resume
                </button>
            </a>
        </div>

        <!-- Card Grid -->
        <div class="card-grid">
          <!-- Experience Card -->
          <div class="expandable-card resume-section" data-section="experience">
            <div class="card-header">
              <span class="card-icon">üíº</span>
              <h3 class="card-title">Experience</h3>
              <p class="card-subtitle">{stats.years} years across {stats.companies} companies</p>
              <div class="hover-overlay"></div>
            </div>
            <div class="card-content">
              <div class="card-content-inner">
                <button class="close-btn" aria-label="Close">‚úï</button>
                <div class="section-content">
                  {groupedSections.experience && groupedSections.experience.map((job) => (
                    <div class="job-item" data-job-id={job.id}>
                      <div class="job-header">
                        <div class="job-info">
                          <h4 class="job-title">{job.title}</h4>
                          <p class="job-company">{job.subtitle || ''}</p>
                        </div>
                        <div class="job-meta">
                          <p class="job-period">{job.date_range || ''}</p>
                          <span class="expand-icon">‚ñº</span>
                        </div>
                      </div>
                      <div class="job-details">
                        <div class="job-details-inner">
                          <p class="job-description">{job.description || ''}</p>
                          {job.details && (
                            <ul class="responsibilities">
                              {job.details.split('\n').filter(detail => detail.trim()).map(detail => (
                                <li>{detail}</li>
                              ))}
                            </ul>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
          
          <!-- Skills Card -->
          <div class="expandable-card resume-section" data-section="skills">
            <div class="card-header">
              <span class="card-icon">üõ†Ô∏è</span>
              <h3 class="card-title">Skills & Tools</h3>
              <p class="card-subtitle">Technologies & Expertise</p>
              <div class="hover-overlay"></div>
            </div>
            <div class="card-content">
              <div class="card-content-inner">
                <button class="close-btn" aria-label="Close">‚úï</button>
                <div class="section-content">
                  <div class="skills-grid">
                    {groupedSections.skills && groupedSections.skills.map((skill) => (
                      <div class="skill-category">
                        <h4>{skill.title}</h4>
                        <div class="skill-tags">
                          {skill.description && skill.description.split(',').map(tech => (
                            <span class="skill-tag">{tech.trim()}</span>
                          ))}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Achievements Card -->
          <div class="expandable-card resume-section" data-section="achievements">
            <div class="card-header">
              <span class="card-icon">üèÜ</span>
              <h3 class="card-title">Achievements</h3>
              <p class="card-subtitle">Notable Accomplishments</p>
              <div class="hover-overlay"></div>
            </div>
            <div class="card-content">
              <div class="card-content-inner">
                <button class="close-btn" aria-label="Close">‚úï</button>
                <div class="section-content">
                  {groupedSections.achievements && groupedSections.achievements.map((achievement) => (
                    <div class="achievement-item">
                      <h4>{achievement.title}</h4>
                      {achievement.subtitle && <p class="subtitle">{achievement.subtitle}</p>}
                      <p>{achievement.description || ''}</p>
                    </div>
                  ))}
                  {groupedSections.courses && groupedSections.courses.map((course) => (
                    <div class="achievement-item">
                      <h4>{course.title}</h4>
                      {course.subtitle && <p class="subtitle">{course.subtitle}</p>}
                      <p>{course.description || ''}</p>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
          
          <!-- Education Card -->
          <div class="expandable-card resume-section" data-section="education">
            <div class="card-header">
              <span class="card-icon">üéì</span>
              <h3 class="card-title">Education</h3>
              <p class="card-subtitle">Academic Background</p>
              <div class="hover-overlay"></div>
            </div>
            <div class="card-content">
              <div class="card-content-inner">
                <button class="close-btn" aria-label="Close">‚úï</button>
                <div class="section-content">
                  {groupedSections.education && groupedSections.education.map((edu) => (
                    <div class="education-item">
                      <h4>{edu.title}</h4>
                      <p class="degree">{edu.subtitle || ''}</p>
                      <p class="period">{edu.date_range || ''}</p>
                      {edu.description && <p class="description">{edu.description}</p>}
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
        </>
        )}
    </div>
  
  <script>
    class ResumeExpansionManager {
      constructor() {
        this.cards = document.querySelectorAll('.expandable-card');
        this.jobItems = document.querySelectorAll('.job-item');
        this.currentlyExpanded = null;
        this.init();
        this.animateStats();
      }
      
      init() {
        // Handle main card expansion
        this.cards.forEach(card => {
          const header = card.querySelector('.card-header');
          const closeBtn = card.querySelector('.close-btn');
          
          header.addEventListener('click', () => this.toggleCard(card));
          
          if (closeBtn) {
            closeBtn.addEventListener('click', (e) => {
              e.stopPropagation();
              this.collapseCard(card);
            });
          }
        });
        
        // Handle nested job expansion
        this.jobItems.forEach(job => {
          const header = job.querySelector('.job-header');
          header.addEventListener('click', (e) => {
            e.stopPropagation();
            this.toggleJob(job);
          });
        });
        
        // Handle escape key
        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape' && this.currentlyExpanded) {
            this.collapseCard(this.currentlyExpanded);
          }
        });
      }
      
      toggleCard(card) {
        if (card.classList.contains('expanded')) {
          this.collapseCard(card);
        } else {
          this.expandCard(card);
        }
      }
      
      expandCard(card) {
        // Collapse currently expanded card if any
        if (this.currentlyExpanded && this.currentlyExpanded !== card) {
          this.collapseCard(this.currentlyExpanded);
        }
        
        // Expand the new card
        card.classList.add('expanded');
        this.currentlyExpanded = card;
        
        // Scroll to card after a brief delay for animation
        setTimeout(() => {
          const rect = card.getBoundingClientRect();
          const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
          const elementTop = rect.top + scrollTop - 100;
          
          window.scrollTo({
            top: elementTop,
            behavior: 'smooth'
          });
        }, 100);
      }
      
      collapseCard(card) {
        card.classList.remove('expanded');
        if (this.currentlyExpanded === card) {
          this.currentlyExpanded = null;
        }
        
        // Also collapse any expanded jobs within
        const expandedJobs = card.querySelectorAll('.job-item.expanded');
        expandedJobs.forEach(job => job.classList.remove('expanded'));
      }
      
      toggleJob(job) {
        job.classList.toggle('expanded');
      }
      
      animateStats() {
        const animateValue = (element, start, end, duration) => {
          if (!element) return;
          const range = end - start;
          const increment = range / (duration / 30);
          let current = start;
          
          const timer = setInterval(function() {
            current += increment;
            if (current >= end) {
              current = end;
              clearInterval(timer);
            }
            element.textContent = Math.floor(current);
          }, 30);
        };
        
        const summaryStats = document.querySelector('.summary-stats');
        if (summaryStats) {
          const years = parseInt(summaryStats.dataset.years) || 0;
          const companies = parseInt(summaryStats.dataset.companies) || 0;
          const roles = parseInt(summaryStats.dataset.roles) || 0;
          
          setTimeout(() => {
            animateValue(document.getElementById('years-exp'), 0, years, 1000);
            animateValue(document.getElementById('companies-count'), 0, companies, 1000);
            animateValue(document.getElementById('roles-count'), 0, roles, 1000);
          }, 500);
        }
      }
    }
    
    // Initialize expansion manager when DOM is ready
    document.addEventListener('DOMContentLoaded', () => {
      new ResumeExpansionManager();
    });
  </script>
    
  <style>
    #resume-dashboard {
      padding: 50px 20px 40px;
      min-height: calc(100vh - 120px);
      max-width: 1200px;
      margin: 0 auto;
    }
    
    /* Summary Stats Section */
    .summary-stats-section {
      text-align: center;
      margin-bottom: 3rem;
      padding: 2rem;
      background: var(--bg-secondary);
      border-radius: 12px;
      border: 1px solid var(--border-color);
    }
    
    .summary-stats {
      display: flex;
      justify-content: center;
      gap: 3rem;
      margin-bottom: 2rem;
    }
    
    .stat-item {
      text-align: center;
    }
    
    .stat-number {
      font-size: 3rem;
      font-weight: 700;
      color: var(--link-color);
      line-height: 1;
    }
    
    .stat-label {
      font-size: 0.9rem;
      color: var(--text-secondary);
      margin-top: 0.5rem;
    }
    
    .download-btn {
      display: inline-flex;
      align-items: center;
      gap: 0.75rem;
      padding: 0.75rem 1.5rem;
      background: var(--link-color);
      color: white;
      border: none;
      border-radius: 8px;
      font-size: 1rem;
      cursor: pointer;
      transition: all 0.3s ease;
      text-decoration: none;
    }
    
    .download-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }
    
    .download-btn span {
      font-size: 1.2rem;
    }
    
    /* Achievement and Course items styling */
    .achievement-item {
      margin-bottom: 1.5rem;
      padding-bottom: 1.5rem;
      border-bottom: 1px solid var(--border-color);
    }
    
    .achievement-item:last-child {
      border-bottom: none;
      margin-bottom: 0;
      padding-bottom: 0;
    }
    
    .achievement-item h4 {
      margin-bottom: 0.5rem;
      color: var(--text-primary);
    }
    
    .achievement-item .subtitle {
      color: var(--text-secondary);
      font-size: 0.95rem;
      margin-bottom: 0.5rem;
    }
    
    .achievement-item p {
      line-height: 1.6;
    }
    
    .error-message {
      text-align: center;
      color: var(--color-error, #dc3545);
      padding: 2rem;
      background-color: var(--color-error-bg, #f8d7da);
      border-radius: 0.5rem;
      margin: 2rem 0;
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
      .summary-stats {
        gap: 1.5rem;
      }
      
      .stat-number {
        font-size: 2rem;
      }
      
      .stat-label {
        font-size: 0.8rem;
      }
      
      #resume-dashboard {
        padding: 40px 15px 30px;
      }
    }
  </style>
</BaseLayout>