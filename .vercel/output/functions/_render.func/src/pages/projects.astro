---
import BaseLayout from '../layouts/BaseLayout.astro';
import db from '../lib/db.js';

// Fetch projects
let projects = [];
try {
  const stmt = db.prepare('SELECT * FROM projects WHERE is_active = 1 ORDER BY display_order, id DESC');
  projects = stmt.all();
} catch (err) {
  console.error('Error fetching projects:', err);
}
---

<BaseLayout title="Projects - Nadav Moskow">
  <link rel="stylesheet" href="/css/inline-expansion.css">
  
  <div id="projects-page">
    <div class="page-header">
      <h1>My Projects</h1>
      <p class="page-subtitle">Click on any project to explore in detail</p>
    </div>
    
    <div class="card-grid">
      {projects.map((project) => (
        <div class="expandable-card" data-project-id={project.id}>
          <div class="card-header">
            <span class="card-icon">{project.emoji || 'üöÄ'}</span>
            <h3 class="card-title">{project.title}</h3>
            {project.subtitle && <p class="card-subtitle">{project.subtitle}</p>}
            {project.description && <p class="card-description">{project.description.substring(0, 100)}...</p>}
            <div class="hover-overlay"></div>
          </div>
          <div class="card-content">
            <div class="card-content-inner">
              <button class="close-btn" aria-label="Close">‚úï</button>
              <div class="project-details">
                <div class="project-overview">
                  <h3>Overview</h3>
                  <p>{project.description || 'No description available'}</p>
                </div>
                
                {project.technologies && (
                  <div class="project-technologies">
                    <h3>Technologies</h3>
                    <div class="tech-stack">
                      {project.technologies.split(',').map(tech => (
                        <span class="tech-tag">{tech.trim()}</span>
                      ))}
                    </div>
                  </div>
                )}
                
                {(project.github_link || project.live_link) && (
                  <div class="project-links">
                    {project.github_link && (
                      <a href={project.github_link} target="_blank" rel="noopener noreferrer" class="project-link">
                        <span>üìÇ</span> GitHub
                      </a>
                    )}
                    {project.live_link && (
                      <a href={project.live_link} target="_blank" rel="noopener noreferrer" class="project-link">
                        <span>üåê</span> Live Demo
                      </a>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
  
  <script>
    class InlineExpansionManager {
      constructor() {
        this.cards = document.querySelectorAll('.expandable-card');
        this.currentlyExpanded = null;
        this.init();
      }
      
      init() {
        this.cards.forEach(card => {
          const header = card.querySelector('.card-header');
          const closeBtn = card.querySelector('.close-btn');
          
          // Click on header to expand
          header.addEventListener('click', () => this.toggleCard(card));
          
          // Click on close button to collapse
          if (closeBtn) {
            closeBtn.addEventListener('click', (e) => {
              e.stopPropagation();
              this.collapseCard(card);
            });
          }
        });
        
        // Handle escape key
        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape' && this.currentlyExpanded) {
            this.collapseCard(this.currentlyExpanded);
          }
        });
      }
      
      toggleCard(card) {
        if (card.classList.contains('expanded')) {
          this.collapseCard(card);
        } else {
          this.expandCard(card);
        }
      }
      
      expandCard(card) {
        // Collapse currently expanded card if any
        if (this.currentlyExpanded && this.currentlyExpanded !== card) {
          this.collapseCard(this.currentlyExpanded);
        }
        
        // Expand the new card
        card.classList.add('expanded');
        this.currentlyExpanded = card;
        
        // Scroll to card after a brief delay for animation
        setTimeout(() => {
          const rect = card.getBoundingClientRect();
          const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
          const elementTop = rect.top + scrollTop - 100; // 100px offset for header
          
          window.scrollTo({
            top: elementTop,
            behavior: 'smooth'
          });
        }, 100);
      }
      
      collapseCard(card) {
        card.classList.remove('expanded');
        if (this.currentlyExpanded === card) {
          this.currentlyExpanded = null;
        }
      }
    }
    
    // Initialize expansion manager when DOM is ready
    document.addEventListener('DOMContentLoaded', () => {
      new InlineExpansionManager();
    });
  </script>
  
  <style>
    #projects-page {
      padding: 80px 20px 40px;
      min-height: calc(100vh - 120px);
      max-width: 1200px;
      margin: 0 auto;
    }
    
    .page-header {
      text-align: center;
      margin-bottom: 40px;
    }
    
    .page-header h1 {
      font-size: 3em;
      margin-bottom: 10px;
      color: var(--text-primary);
    }
    
    .page-subtitle {
      font-size: 1.2em;
      color: var(--text-secondary);
      opacity: 0.8;
    }
    
    /* Additional project page specific overrides */
    @media (max-width: 768px) {
      .page-header h1 {
        font-size: 2em;
      }
      
      .page-subtitle {
        font-size: 1em;
      }
      
      #projects-page {
        padding: 60px 15px 30px;
      }
    }
  </style>
</BaseLayout>