<div id="projects-dashboard">
    <!-- React Root -->
    <div id="projects-react-root"></div>
</div>

<!-- React and Babel for JSX transformation -->
<script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

<!-- Projects data for React -->
<script>
window.projectsData = [
    <% projects.forEach((project, index) => { %>
    {
        id: <%= index %>,
        title: <%- JSON.stringify(project.title) %>,
        emoji: <%- JSON.stringify(project.emoji || '🚀') %>,
        subtitle: <%- JSON.stringify(project.subtitle || '') %>,
        description: <%- JSON.stringify(project.description) %>,
        technologies: <%- JSON.stringify(project.technologies || '') %>,
        github_link: <%- JSON.stringify(project.github_link || '') %>,
        live_link: <%- JSON.stringify(project.live_link || '') %>,
        image_path: <%- JSON.stringify(project.image_path || '') %>,
        overview: <%- JSON.stringify(project.subtitle || (project.description ? project.description.substring(0, 150) + '...' : 'An innovative project showcasing cutting-edge technologies and best practices.')) %>,
        achievements: [
            "Implemented core functionality with modern best practices",
            "Optimized performance for enhanced user experience",
            "Integrated responsive design for all devices",
            "Achieved 100% test coverage"
        ],
        timeline: "2024",
        team_size: <%= index % 4 + 1 %>
    }<%= index < projects.length - 1 ? ',' : '' %>
    <% }); %>
];
</script>

<!-- React Component -->
<script type="text/babel">
const { useState, useEffect, useRef } = React;

// Project Card Component
function ProjectCard({ project, onClick }) {
    return (
        <div 
            className="project-card"
            onClick={() => onClick(project)}
            style={{
                opacity: 0,
                animation: `fadeInUp 0.6s forwards`,
                animationDelay: `${project.id * 0.1}s`
            }}
        >
            <div className="project-card-inner">
                <div className="project-card-emoji">{project.emoji}</div>
                <h3 className="project-card-title">{project.title}</h3>
                <p className="project-card-subtitle">{project.subtitle || 'Click to learn more'}</p>
                <div className="project-card-hover-overlay">
                    <span className="view-project-text">View Project →</span>
                </div>
            </div>
        </div>
    );
}

// Modal Component
function ProjectModal({ project, isOpen, onClose }) {
    const modalRef = useRef(null);

    useEffect(() => {
        const handleEscape = (e) => {
            if (e.key === 'Escape' && isOpen) {
                onClose();
            }
        };

        const handleClickOutside = (e) => {
            if (modalRef.current && !modalRef.current.contains(e.target)) {
                onClose();
            }
        };

        if (isOpen) {
            document.addEventListener('keydown', handleEscape);
            document.addEventListener('mousedown', handleClickOutside);
            document.body.style.overflow = 'hidden';
        }

        return () => {
            document.removeEventListener('keydown', handleEscape);
            document.removeEventListener('mousedown', handleClickOutside);
            document.body.style.overflow = '';
        };
    }, [isOpen, onClose]);

    if (!isOpen || !project) return null;

    return (
        <div className={`project-modal ${isOpen ? 'show' : ''}`}>
            <div className="project-modal-content" ref={modalRef}>
                <button className="modal-close" onClick={onClose} aria-label="Close modal">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                        <line x1="18" y1="6" x2="6" y2="18"></line>
                        <line x1="6" y1="6" x2="18" y2="18"></line>
                    </svg>
                </button>
                
                <div className="modal-header">
                    <div className="modal-header-content">
                        <span className="modal-emoji">{project.emoji}</span>
                        <div>
                            <h2 className="modal-title">{project.title}</h2>
                            <p className="modal-subtitle">{project.subtitle || 'Project Overview'}</p>
                        </div>
                    </div>
                </div>

                <div className="modal-body">
                    {/* Overview Section */}
                    <div className="modal-section">
                        <h3 className="section-title">Overview</h3>
                        <div className="section-content" dangerouslySetInnerHTML={{ __html: project.description }} />
                    </div>

                    {/* Key Achievements */}
                    <div className="modal-section">
                        <h3 className="section-title">Key Achievements</h3>
                        <ul className="achievements-list">
                            {project.achievements.map((achievement, idx) => (
                                <li key={idx} className="achievement-item">
                                    <span className="achievement-icon">✓</span>
                                    {achievement}
                                </li>
                            ))}
                        </ul>
                    </div>

                    {/* Timeline and Team */}
                    <div className="modal-section stats-section">
                        <div className="stat-item">
                            <span className="stat-icon">📅</span>
                            <div className="stat-content">
                                <span className="stat-label">Timeline</span>
                                <span className="stat-value">{project.timeline}</span>
                            </div>
                        </div>
                        <div className="stat-item">
                            <span className="stat-icon">👥</span>
                            <div className="stat-content">
                                <span className="stat-label">Team Size</span>
                                <span className="stat-value">{project.team_size} {project.team_size === 1 ? 'Developer' : 'Developers'}</span>
                            </div>
                        </div>
                    </div>

                    {/* Technologies */}
                    {project.technologies && (
                        <div className="modal-section">
                            <h3 className="section-title">Technologies Used</h3>
                            <div className="tech-tags-container">
                                {project.technologies.split(',').map((tech, idx) => (
                                    <span key={idx} className="tech-tag">{tech.trim()}</span>
                                ))}
                            </div>
                        </div>
                    )}

                    {/* Project Image */}
                    {project.image_path && (
                        <div className="modal-section">
                            <img 
                                src={project.image_path} 
                                alt={project.title}
                                className="project-image"
                            />
                        </div>
                    )}

                    {/* Links */}
                    {(project.github_link || project.live_link) && (
                        <div className="modal-section links-section">
                            {project.github_link && (
                                <a href={project.github_link} target="_blank" rel="noopener noreferrer" className="project-link github-link">
                                    <svg className="link-icon" viewBox="0 0 24 24" width="20" height="20">
                                        <path fill="currentColor" d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                                    </svg>
                                    View on GitHub
                                </a>
                            )}
                            {project.live_link && (
                                <a href={project.live_link} target="_blank" rel="noopener noreferrer" className="project-link live-link">
                                    <svg className="link-icon" viewBox="0 0 24 24" width="20" height="20">
                                        <path fill="currentColor" d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 17.93c-3.94-.49-7-3.85-7-7.93 0-.62.08-1.21.21-1.79L9 15v1c0 1.1.9 2 2 2v1.93zm6.9-2.54c-.26-.81-1-1.39-1.9-1.39h-1v-3c0-.55-.45-1-1-1H8v-2h2c.55 0 1-.45 1-1V7h2c1.1 0 2-.9 2-2v-.41c2.93 1.19 5 4.06 5 7.41 0 2.08-.8 3.97-2.1 5.39z"/>
                                    </svg>
                                    View Live
                                </a>
                            )}
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
}

// Main Projects Component
window.ProjectsApp = function ProjectsApp() {
    const [selectedProject, setSelectedProject] = useState(null);
    const [isModalOpen, setIsModalOpen] = useState(false);

    const handleProjectClick = (project) => {
        setSelectedProject(project);
        setIsModalOpen(true);
    };

    const handleCloseModal = () => {
        setIsModalOpen(false);
        setTimeout(() => setSelectedProject(null), 300);
    };

    return (
        <React.Fragment>
            <div className="projects-header">
                <p className="projects-subtitle">Click on any project to explore in detail</p>
            </div>

            {window.projectsData.length > 0 ? (
                <div className="projects-grid">
                    {window.projectsData.map(project => (
                        <ProjectCard 
                            key={project.id} 
                            project={project} 
                            onClick={handleProjectClick}
                        />
                    ))}
                </div>
            ) : (
                <div className="no-projects">
                    <span className="no-projects-icon">📁</span>
                    <p>No projects have been added yet. Please check back later!</p>
                </div>
            )}

            <ProjectModal 
                project={selectedProject}
                isOpen={isModalOpen}
                onClose={handleCloseModal}
            />
        </React.Fragment>
    );
}

// Function to initialize the app
function initLocalProjectsApp() {
    const container = document.getElementById('projects-react-root');
    if (container && window.projectsData && !container.hasAttribute('data-react-initialized')) {
        container.setAttribute('data-react-initialized', 'true');
        const root = ReactDOM.createRoot(container);
        root.render(React.createElement(window.ProjectsApp));
    }
}

// Initialize on page load
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initLocalProjectsApp);
} else {
    // Small delay to ensure React is loaded
    setTimeout(initLocalProjectsApp, 100);
}

// Additional fallback for navigation issues
window.addEventListener('load', function() {
    setTimeout(function() {
        const container = document.getElementById('projects-react-root');
        if (container && !container.hasAttribute('data-react-initialized')) {
            initLocalProjectsApp();
        }
    }, 200);
});

// Re-initialize on visibility change
document.addEventListener('visibilitychange', function() {
    if (!document.hidden) {
        const container = document.getElementById('projects-react-root');
        if (container && container.children.length === 0) {
            container.removeAttribute('data-react-initialized');
            initLocalProjectsApp();
        }
    }
});
</script>