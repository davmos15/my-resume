---
// Unified modal component for both projects and resume
---

<div id="unified-modal" class="unified-modal">
    <div class="modal-content">
        <button class="modal-close" aria-label="Close modal">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <line x1="18" y1="6" x2="6" y2="18"/>
                <line x1="6" y1="6" x2="18" y2="18"/>
            </svg>
        </button>
        <div class="modal-header">
            <span class="modal-icon"></span>
            <div class="modal-header-text">
                <h2 class="modal-title"></h2>
                <p class="modal-subtitle"></p>
            </div>
        </div>
        <div class="modal-body">
            <!-- Content will be dynamically inserted here -->
        </div>
    </div>
</div>

<script>
// Simple Modal Manager - no events, just direct access
window.modalManager = {
    modal: null,
    modalContent: null,
    modalClose: null,
    modalIcon: null,
    modalTitle: null,
    modalSubtitle: null,
    modalBody: null,
    isOpen: false,
    eventListenersAttached: false,
    escapeListener: null,
    
    init() {
        console.log('üîß ModalManager: Starting initialization...');
        
        // Always get fresh DOM references
        this.modal = document.getElementById('unified-modal');
        console.log('üîß ModalManager: Modal element found:', !!this.modal);
        
        if (!this.modal) {
            console.error('‚ùå ModalManager: unified-modal element not found in DOM');
            return false;
        }
        
        // Clear any existing state
        this.isOpen = false;
        this.removeEventListeners();
        
        // Get fresh references to all modal elements
        this.modalContent = this.modal.querySelector('.modal-content');
        this.modalClose = this.modal.querySelector('.modal-close');
        this.modalIcon = this.modal.querySelector('.modal-icon');
        this.modalTitle = this.modal.querySelector('.modal-title');
        this.modalSubtitle = this.modal.querySelector('.modal-subtitle');
        this.modalBody = this.modal.querySelector('.modal-body');
        
        console.log('üîß ModalManager: Sub-elements found:', {
            content: !!this.modalContent,
            close: !!this.modalClose,
            icon: !!this.modalIcon,
            title: !!this.modalTitle,
            subtitle: !!this.modalSubtitle,
            body: !!this.modalBody
        });
        
        this.setupEventListeners();
        console.log('‚úÖ ModalManager: Initialization complete');
        return true;
    },
    
    removeEventListeners() {
        // Remove the old escape key listener if it exists
        if (this.escapeListener) {
            document.removeEventListener('keydown', this.escapeListener);
            this.escapeListener = null;
        }
        this.eventListenersAttached = false;
    },
    
    setupEventListeners() {
        if (!this.modal || this.eventListenersAttached) return;
        
        // Close button
        if (this.modalClose) {
            this.modalClose.addEventListener('click', () => this.close());
        }
        
        // Click outside to close
        this.modal.addEventListener('click', (e) => {
            if (e.target === this.modal) this.close();
        });
        
        // Create escape key listener function
        this.escapeListener = (e) => {
            if (e.key === 'Escape' && this.isOpen) this.close();
        };
        
        // Add escape key listener
        document.addEventListener('keydown', this.escapeListener);
        
        this.eventListenersAttached = true;
    },
    
    open(data) {
        console.log('üîß ModalManager: Opening modal with data:', data);
        
        if (!this.modal) {
            console.error('‚ùå ModalManager: Cannot open - modal element not found');
            return;
        }
        
        if (this.isOpen) {
            console.warn('‚ö†Ô∏è ModalManager: Modal already open, ignoring request');
            return;
        }
        
        // Update modal content
        if (this.modalIcon) this.modalIcon.textContent = data.icon || '';
        if (this.modalTitle) this.modalTitle.textContent = data.title || '';
        if (this.modalSubtitle) {
            this.modalSubtitle.textContent = data.subtitle || '';
            this.modalSubtitle.style.display = data.subtitle ? 'block' : 'none';
        }
        if (this.modalBody) this.modalBody.innerHTML = data.content || '';
        
        console.log('üîß ModalManager: Content updated, showing modal...');
        
        // Show modal
        this.isOpen = true;
        this.modal.classList.add('show');
        document.body.style.overflow = 'hidden';
        
        console.log('‚úÖ ModalManager: Modal opened successfully');
        
        // Initialize any interactive content
        this.initModalInteractions();
    },
    
    close() {
        if (!this.modal || !this.isOpen) return;
        
        this.isOpen = false;
        this.modal.classList.remove('show');
        document.body.style.overflow = '';
    },
    
    initModalInteractions() {
        // Handle collapsible sections in modal
        const toggles = this.modalBody?.querySelectorAll('[data-toggle]');
        toggles?.forEach(toggle => {
            toggle.addEventListener('click', (e) => {
                const targetId = toggle.getAttribute('data-toggle');
                const target = this.modalBody?.querySelector(`#${targetId}`);
                if (target) {
                    target.classList.toggle('expanded');
                    toggle.textContent = target.classList.contains('expanded') ? '‚àí' : '+';
                }
            });
        });
    }
};

// Initialize immediately when script loads
console.log('üöÄ ModalManager: Script loaded, starting initialization...');

// Force re-initialization to ensure fresh DOM references
// This is crucial for Astro's page navigation
if (window.modalManager) {
    // Clear any existing state first
    window.modalManager.isOpen = false;
    window.modalManager.removeEventListeners();
}

const initResult = window.modalManager.init();
console.log('üöÄ ModalManager: Init result:', initResult);

// Utility function to ensure modal manager is properly initialized
window.ensureModalManager = function() {
    if (!window.modalManager) {
        console.log('‚ùå Modal manager object does not exist');
        return false;
    }
    
    // Check if modal element still exists in DOM
    const currentModal = document.getElementById('unified-modal');
    if (!currentModal) {
        console.log('‚ùå Modal element not found in DOM');
        return false;
    }
    
    // If modal manager exists but doesn't have a reference to current modal, re-init
    if (!window.modalManager.modal || window.modalManager.modal !== currentModal) {
        console.log('üîÑ Modal reference stale, re-initializing...');
        return window.modalManager.init();
    }
    
    return true;
};

// Global function for pages to safely open modals
window.safeOpenModal = function(data) {
    console.log('üîß Safe modal open requested:', data);
    
    if (!window.ensureModalManager()) {
        console.error('‚ùå Failed to ensure modal manager is ready');
        return false;
    }
    
    if (window.modalManager && window.modalManager.open) {
        window.modalManager.open(data);
        return true;
    }
    
    console.error('‚ùå Modal manager open function not available');
    return false;
};
</script>