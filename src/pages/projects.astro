---
import BaseLayout from '../layouts/BaseLayout.astro';
import { allAsync } from '../lib/db.js';

// Fetch projects
let projects = [];
try {
  projects = await allAsync('SELECT * FROM projects WHERE is_active = true ORDER BY display_order, id DESC');
} catch (err) {
  console.error('Error fetching projects:', err);
}
---

<BaseLayout title="Projects - Nadav Moskow">
  <link rel="stylesheet" href="/css/inline-expansion.css">
  
  <div id="projects-page">
    <div class="page-header">
      <h1>My Projects</h1>
      <p class="page-subtitle">Click on any project to explore in detail</p>
    </div>
    
    <div class="projects-list">
      {projects.map((project) => (
        <div class="expandable-item" data-card-type="project" data-project-id={project.id}>
          <div class="item-header">
            <span class="item-emoji">{project.emoji || 'üöÄ'}</span>
            <div class="item-content-header">
              <h3 class="item-title">{project.title}</h3>
              {project.subtitle && <p class="item-subtitle">{project.subtitle}</p>}
            </div>
            <button class="close-button" aria-label="Close expanded view">‚úï</button>
          </div>
          <div class="item-content">
            <div class="item-content-inner">
              <div class="content-section">
                <h4 class="section-title">Overview</h4>
                <div class="section-content">
                  <p>{project.description || 'No description available'}</p>
                </div>
              </div>
              
              {project.technologies && (
                <div class="content-section">
                  <h4 class="section-title">Technologies</h4>
                  <div class="section-content">
                    <div class="tech-tags">
                      {project.technologies.split(',').map(tech => (
                        <span class="tech-tag">{tech.trim()}</span>
                      ))}
                    </div>
                  </div>
                </div>
              )}
              
              {(project.github_link || project.live_link) && (
                <div class="content-section">
                  <h4 class="section-title">Links</h4>
                  <div class="section-content">
                    <div class="project-links">
                      {project.github_link && (
                        <a href={project.github_link} target="_blank" rel="noopener noreferrer" class="project-link">
                          <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                          </svg>
                          GitHub Repository
                        </a>
                      )}
                      {project.live_link && (
                        <a href={project.live_link} target="_blank" rel="noopener noreferrer" class="project-link">
                          <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3m-2 16H5V5h7V3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7h-2v7z"/>
                          </svg>
                          Live Demo
                        </a>
                      )}
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      ))}
    </div>
    
    {projects.length === 0 && (
      <div class="no-projects">
        <span class="no-projects-icon">üìÅ</span>
        <p>No projects available at the moment.</p>
      </div>
    )}
  </div>
  
  <script>
    // Projects expansion functionality
    function initProjectsExpansion() {
      let currentlyExpanded = null;
      
      function toggleItem(item) {
        if (item.classList.contains('expanded')) {
          collapseItem(item);
        } else {
          expandItem(item);
        }
      }
      
      function expandItem(item) {
        // Collapse any currently expanded item
        if (currentlyExpanded && currentlyExpanded !== item) {
          collapseItem(currentlyExpanded);
        }
        
        // Expand the new item
        item.classList.add('expanded');
        currentlyExpanded = item;
        
        // Scroll to item after expansion
        setTimeout(() => {
          item.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start' 
          });
        }, 300);
        
        console.log('Expanded project item');
      }
      
      function collapseItem(item) {
        item.classList.remove('expanded');
        if (currentlyExpanded === item) {
          currentlyExpanded = null;
        }
        console.log('Collapsed project item');
      }
      
      // Event delegation for all project interactions
      document.addEventListener('click', function(e) {
        const item = e.target.closest('.expandable-item');
        if (!item) return;
        
        // Handle close button
        if (e.target.closest('.close-button')) {
          e.preventDefault();
          e.stopPropagation();
          collapseItem(item);
          return;
        }
        
        // Handle header clicks (but not links within content)
        if (e.target.closest('.item-header') && !e.target.closest('.close-button')) {
          e.preventDefault();
          e.stopPropagation();
          toggleItem(item);
          return;
        }
        
        // Allow links in expanded content to work normally
        if (e.target.closest('.item-content a')) {
          return; // Let the link work normally
        }
      });
      
      // Handle escape key
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && currentlyExpanded) {
          collapseItem(currentlyExpanded);
        }
      });
      
      console.log('Projects expansion initialized');
    }
    
    // Initialize immediately or when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initProjectsExpansion);
    } else {
      initProjectsExpansion();
    }
  </script>
  
  <style>
    #projects-page {
      max-width: 800px;
      margin: 0 auto;
      padding: 40px 20px;
    }
    
    .page-header {
      text-align: center;
      margin-bottom: 40px;
    }
    
    .page-header h1 {
      font-size: 2.5em;
      margin-bottom: 10px;
      color: var(--text-primary);
      font-weight: 700;
    }
    
    .page-subtitle {
      font-size: 1.1em;
      opacity: 0.7;
      color: var(--text-secondary);
    }
    
    .no-projects {
      text-align: center;
      padding: 80px 20px;
    }
    
    .no-projects-icon {
      font-size: 5em;
      display: block;
      margin-bottom: 20px;
      opacity: 0.5;
    }
    
    .no-projects p {
      font-size: 1.2em;
      color: var(--text-primary);
      opacity: 0.7;
    }
    
    /* Mobile adjustments */
    @media (max-width: 768px) {
      #projects-page {
        padding: 20px 10px;
      }
      
      .page-header h1 {
        font-size: 2em;
      }
      
      .page-subtitle {
        font-size: 1em;
      }
    }
  </style>
</BaseLayout>
