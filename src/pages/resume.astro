---
import BaseLayout from '../layouts/BaseLayout.astro';
import db from '../lib/db.js';

// Initialize variables
let groupedSections = {};
let error = null;
let stats = { years: 0, companies: 0, roles: 0 };

try {
    // Fetch resume items from database grouped by type
    const sections = db.prepare(`
        SELECT * FROM resume_sections 
        WHERE is_active = 1 
        ORDER BY section_type, display_order
    `).all();

    // Group sections by type
    groupedSections = sections.reduce((acc, section) => {
        if (!acc[section.section_type]) {
            acc[section.section_type] = [];
        }
        acc[section.section_type].push({
            id: section.id,
            type: section.section_type,
            title: section.title,
            subtitle: section.subtitle,
            date_range: section.date_range,
            description: section.description,
            details: section.details
        });
        return acc;
    }, {});

    // Calculate stats for summary section
    let companies = new Set();
    let oldestDate = new Date();
    let yearsExp = 0;

    if (groupedSections.experience && groupedSections.experience.length > 0) {
        groupedSections.experience.forEach(job => {
            if (job.subtitle) {
                const company = job.subtitle.split(' - ')[0];
                companies.add(company);
            }
            if (job.date_range) {
                const dateMatch = job.date_range.match(/(\d{4})/);
                if (dateMatch) {
                    const year = parseInt(dateMatch[1]);
                    const jobDate = new Date(year, 0, 1);
                    if (jobDate < oldestDate) oldestDate = jobDate;
                }
            }
        });
        yearsExp = new Date().getFullYear() - oldestDate.getFullYear();
    }

    stats = {
        years: yearsExp > 0 ? yearsExp : 1,
        companies: companies.size,
        roles: groupedSections.experience ? groupedSections.experience.length : 0
    };
} catch (err) {
    console.error('Error fetching resume sections:', err);
    error = err.message;
}
---

<BaseLayout title="Resume - Nadav Moskow">
    <link rel="stylesheet" href="/css/unified-cards.css">
    
    <div id="resume-dashboard">
        {error ? (
            <div class="error-message">
                <p>Error loading resume data: {error}</p>
            </div>
        ) : (
            <>
        <!-- Professional Summary Section -->
        <div class="summary-stats-section">
            <div class="summary-stats" 
                 data-years={stats.years}
                 data-companies={stats.companies}
                 data-roles={stats.roles}>
                <div class="stat-item">
                    <div class="stat-number" id="years-exp">0</div>
                    <div class="stat-label">Years Experience</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="companies-count">0</div>
                    <div class="stat-label">Companies</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="roles-count">0</div>
                    <div class="stat-label">Roles</div>
                </div>
            </div>
            
            <!-- Download Button -->
            <a href="/images/Nadav Moskow - Resume.pdf" target="_blank" download>
                <button class="download-btn">
                    <span>📄</span>
                    Download PDF Resume
                </button>
            </a>
        </div>

        <!-- Card Grid -->
        <div class="card-grid">
          <!-- Experience Card -->
          <div class="card-item" data-card-type="resume" data-card-section="experience">
            <div class="card-inner">
              <span class="card-emoji">💼</span>
              <h3 class="card-title">Experience</h3>
            </div>
            <div class="card-hover-overlay">
              <span class="hover-text">View Details →</span>
            </div>
          </div>
          
          <!-- Skills Card -->
          <div class="card-item" data-card-type="resume" data-card-section="skills">
            <div class="card-inner">
              <span class="card-emoji">🛠️</span>
              <h3 class="card-title">Skills & Tools</h3>
            </div>
            <div class="card-hover-overlay">
              <span class="hover-text">View Details →</span>
            </div>
          </div>
          
          <!-- Achievements Card -->
          <div class="card-item" data-card-type="resume" data-card-section="achievements">
            <div class="card-inner">
              <span class="card-emoji">🏆</span>
              <h3 class="card-title">Achievements</h3>
            </div>
            <div class="card-hover-overlay">
              <span class="hover-text">View Details →</span>
            </div>
          </div>
          
          <!-- Education Card -->
          <div class="card-item" data-card-type="resume" data-card-section="education">
            <div class="card-inner">
              <span class="card-emoji">🎓</span>
              <h3 class="card-title">Education</h3>
            </div>
            <div class="card-hover-overlay">
              <span class="hover-text">View Details →</span>
            </div>
          </div>
        </div>
        </>
        )}
    </div>
  
  <!-- CardModal is now included in BaseLayout -->
  
  <script define:vars={{ groupedSections, stats }}>
    console.log('🚀 Resume: Page script starting...');
    
    // Animate stats on page load
    function animateValue(element, start, end, duration) {
      if (!element) return;
      const range = end - start;
      const increment = range / (duration / 30);
      let current = start;
      
      const timer = setInterval(function() {
        current += increment;
        if (current >= end) {
          current = end;
          clearInterval(timer);
        }
        element.textContent = Math.floor(current);
      }, 30);
    }
    
    function buildExperienceContent() {
      const experiences = groupedSections.experience || [];
      return experiences.map((job, idx) => `
        <div class="job-item">
          <div class="job-header">
            <h4>${job.title}</h4>
            <p>${job.subtitle || ''} | ${job.date_range || ''}</p>
          </div>
          <div class="job-description">${job.description || ''}</div>
        </div>
      `).join('');
    }
    
    function buildSkillsContent() {
      const skills = groupedSections.skills || [];
      return skills.map(skill => `
        <div class="skill-section">
          <h4>${skill.title}</h4>
          <div>${skill.description || ''}</div>
        </div>
      `).join('');
    }
    
    function buildAchievementsContent() {
      const achievements = groupedSections.courses || [];
      return achievements.map(achievement => `
        <div class="achievement-item">
          <h4>${achievement.title}</h4>
          ${achievement.subtitle ? `<p class="subtitle">${achievement.subtitle}</p>` : ''}
          <div>${achievement.description || ''}</div>
        </div>
      `).join('');
    }
    
    function buildEducationContent() {
      const education = groupedSections.education || [];
      return education.map(edu => `
        <div class="education-item">
          <h4>${edu.title}</h4>
          <p class="school">${edu.subtitle || ''}</p>
          <p class="dates">${edu.date_range || ''}</p>
          <div>${edu.description || ''}</div>
        </div>
      `).join('');
    }
    
    // Initialize stats animation immediately
    setTimeout(() => {
      animateValue(document.getElementById('years-exp'), 0, stats.years, 1000);
      animateValue(document.getElementById('companies-count'), 0, stats.companies, 1000);
      animateValue(document.getElementById('roles-count'), 0, stats.roles, 1000);
    }, 500);
    
    // Simple polling function to set up cards when modal is ready
    function trySetupCards() {
      console.log('📄 Resume: Attempting to setup cards...');
      
      // Check if safeOpenModal is available (indicates modal system is ready)
      if (!window.safeOpenModal) {
        console.log('⏳ Resume: Safe modal function not ready yet');
        return false;
      }
      
      // Ensure modal manager is initialized with fresh DOM references
      if (window.ensureModalManager && !window.ensureModalManager()) {
        console.log('⏳ Resume: Modal manager not ready yet');
        return false;
      }
      
      // Set up card click handlers
      const cards = document.querySelectorAll('[data-card-type="resume"]');
      console.log('📄 Resume: Found', cards.length, 'resume cards');
      
      cards.forEach((card, index) => {
        console.log('📄 Resume: Setting up card', index + 1, 'section:', card.getAttribute('data-card-section'));
        card.onclick = function() {
          console.log('🖱️ Resume: Card clicked!', this.getAttribute('data-card-section'));
          const section = this.getAttribute('data-card-section');
          const data = {
            experience: {
              icon: '💼',
              title: 'Professional Experience',
              content: buildExperienceContent()
            },
            skills: {
              icon: '🛠️',
              title: 'Skills & Tools',
              content: buildSkillsContent()
            },
            achievements: {
              icon: '🏆',
              title: 'Courses & Achievements',
              content: buildAchievementsContent()
            },
            education: {
              icon: '🎓',
              title: 'Education',
              content: buildEducationContent()
            }
          };
          
          if (data[section]) {
            console.log('🔧 Resume: Opening modal for section:', section);
            if (window.safeOpenModal) {
              window.safeOpenModal(data[section]);
            } else {
              console.error('❌ Resume: safeOpenModal function not available');
            }
          } else {
            console.error('❌ Resume: No data found for section:', section);
          }
        };
      });
      
      console.log('✅ Resume: Card setup complete!');
      return true;
    }
    
    // Simple polling approach - try every 100ms until success
    let attempts = 0;
    const maxAttempts = 50; // 5 seconds max
    
    function pollForModal() {
      console.log('🔄 Resume: Polling attempt', attempts + 1, 'of', maxAttempts);
      
      if (trySetupCards()) {
        console.log('🎉 Resume: Cards setup successful!');
        return;
      }
      
      if (attempts >= maxAttempts) {
        console.error('❌ Resume: Failed to setup cards after', maxAttempts, 'attempts');
        return;
      }
      
      attempts++;
      setTimeout(pollForModal, 100);
    }
    
    // Start polling immediately
    console.log('🚀 Resume: Starting card setup polling...');
    pollForModal();
  </script>
    
  <style>
    #resume-dashboard {
      padding: 50px 20px 40px;
      min-height: calc(100vh - 120px);
    }
    
    /* Modal content styles */
    .job-item, .skill-section, .achievement-item, .education-item {
      margin-bottom: 25px;
      padding-bottom: 25px;
      border-bottom: 1px solid var(--border-color);
    }
    
    .job-item:last-child, 
    .skill-section:last-child, 
    .achievement-item:last-child, 
    .education-item:last-child {
      border-bottom: none;
    }
    
    .job-header h4, .skill-section h4, .achievement-item h4, .education-item h4 {
      margin: 0 0 10px 0;
      color: var(--text-primary);
    }
    
    .job-header p, .subtitle, .school, .dates {
      margin: 5px 0;
      opacity: 0.8;
      font-size: 0.9em;
    }
    
    .job-description, .skill-section div, .achievement-item div, .education-item div {
      margin-top: 15px;
      line-height: 1.6;
    }
    
    .error-message {
      text-align: center;
      color: var(--color-error, #dc3545);
      padding: 2rem;
      background-color: var(--color-error-bg, #f8d7da);
      border-radius: 0.5rem;
      margin: 2rem 0;
    }
  </style>
</BaseLayout>