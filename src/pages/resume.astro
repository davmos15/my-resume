---
import BaseLayout from '../layouts/BaseLayout.astro';
import db from '../lib/db.js';

// Initialize variables
let groupedSections = {};
let error = null;
let stats = { years: 0, companies: 0, roles: 0 };

try {
    // Fetch resume items from database grouped by type
    const sections = db.prepare(`
        SELECT * FROM resume_sections 
        WHERE is_active = 1 
        ORDER BY section_type, display_order
    `).all();

    // Group sections by type
    groupedSections = sections.reduce((acc, section) => {
        if (!acc[section.section_type]) {
            acc[section.section_type] = [];
        }
        acc[section.section_type].push({
            id: section.id,
            type: section.section_type,
            title: section.title,
            subtitle: section.subtitle,
            date_range: section.date_range,
            description: section.description,
            details: section.details
        });
        return acc;
    }, {});

    // Calculate stats for summary section
    let companies = new Set();
    let oldestDate = new Date();
    let yearsExp = 0;

    if (groupedSections.experience && groupedSections.experience.length > 0) {
        groupedSections.experience.forEach(job => {
            if (job.subtitle) {
                const company = job.subtitle.split(' - ')[0];
                companies.add(company);
            }
            if (job.date_range) {
                const dateMatch = job.date_range.match(/(\d{4})/);
                if (dateMatch) {
                    const year = parseInt(dateMatch[1]);
                    const jobDate = new Date(year, 0, 1);
                    if (jobDate < oldestDate) oldestDate = jobDate;
                }
            }
        });
        yearsExp = new Date().getFullYear() - oldestDate.getFullYear();
    }

    stats = {
        years: yearsExp > 0 ? yearsExp : 1,
        companies: companies.size,
        roles: groupedSections.experience ? groupedSections.experience.length : 0
    };
} catch (err) {
    console.error('Error fetching resume sections:', err);
    error = err.message;
}
---

<BaseLayout title="Resume - Nadav Moskow">
    <link rel="stylesheet" href="/css/inline-expansion.css">
    
    <div id="resume-dashboard">
        {error ? (
            <div class="error-message">
                <p>Error loading resume data: {error}</p>
            </div>
        ) : (
            <>
        <!-- Professional Summary Section -->
        <div class="summary-stats-section">
            <div class="summary-stats">
                <div class="stat-item">
                    <div class="stat-number" id="years-exp">0</div>
                    <div class="stat-label">Years Experience</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="companies-count">0</div>
                    <div class="stat-label">Companies</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="roles-count">0</div>
                    <div class="stat-label">Roles</div>
                </div>
            </div>
            
            <!-- Download Button -->
            <a href="/images/Nadav Moskow - Resume.pdf" target="_blank" download>
                <button class="download-btn">
                    <span>üìÑ</span>
                    Download PDF Resume
                </button>
            </a>
        </div>

        <!-- Resume List -->
        <div class="resume-list">
          <!-- Experience Item -->
          <div class="expandable-item" data-card-type="resume" data-section="experience">
            <div class="item-header">
              <span class="item-emoji">üíº</span>
              <div class="item-content-header">
                <h3 class="item-title">Professional Experience</h3>
                <p class="item-subtitle">{stats.years} years across {stats.companies} companies</p>
              </div>
              <button class="close-button" aria-label="Close expanded view">‚úï</button>
            </div>
            <div class="item-content">
              <div class="item-content-inner">
                <div class="content-section">
                  <h4 class="section-title">Work History</h4>
                  <div class="section-content">
                    <div class="job-list">
                      {(groupedSections.experience || []).map((job, index) => (
                        <div class="job-item" data-job-id={job.id}>
                          <div class="job-header" data-job-index={index}>
                            <div class="job-info">
                              <h4>{job.title}</h4>
                              <div class="job-meta">
                                <span class="job-company">{job.subtitle}</span>
                                <span class="job-dates">{job.date_range}</span>
                              </div>
                            </div>
                            <button class="job-toggle" data-job-index={index}>+</button>
                          </div>
                          <div class="job-details" id={`job-details-${index}`}>
                            <div class="job-description" set:html={job.description || job.details || 'No description available'} />
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Skills Item -->
          <div class="expandable-item" data-card-type="resume" data-section="skills">
            <div class="item-header">
              <span class="item-emoji">üõ†Ô∏è</span>
              <div class="item-content-header">
                <h3 class="item-title">Skills & Technologies</h3>
                <p class="item-subtitle">Technical expertise & tools</p>
              </div>
              <button class="close-button" aria-label="Close expanded view">‚úï</button>
            </div>
            <div class="item-content">
              <div class="item-content-inner">
                <div class="content-section">
                  <h4 class="section-title">Technical Skills</h4>
                  <div class="section-content">
                    <div class="skills-grid">
                      {(groupedSections.skills || []).map((skill) => (
                        <div class="skill-category">
                          <h4>{skill.title}</h4>
                          <div set:html={skill.description || skill.details || 'No details available'} />
                        </div>
                      ))}
                      {(!groupedSections.skills || groupedSections.skills.length === 0) && (
                        <div class="skill-category">
                          <h4>Core Technologies</h4>
                          <ul class="skill-list">
                            <li>Business Applications (NetSuite, Salesforce, Freshdesk)</li>
                            <li>Microsoft 365 (Power Automate, PowerApps, SharePoint)</li>
                            <li>Data Analysis (Google Data Studio, PowerBI)</li>
                            <li>Web Technologies (HTML, CSS, JavaScript)</li>
                          </ul>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Education Item -->
          <div class="expandable-item" data-card-type="resume" data-section="education">
            <div class="item-header">
              <span class="item-emoji">üéì</span>
              <div class="item-content-header">
                <h3 class="item-title">Education</h3>
                <p class="item-subtitle">Academic background</p>
              </div>
              <button class="close-button" aria-label="Close expanded view">‚úï</button>
            </div>
            <div class="item-content">
              <div class="item-content-inner">
                <div class="content-section">
                  <h4 class="section-title">Educational Background</h4>
                  <div class="section-content">
                    <div class="education-list">
                      {(groupedSections.education || []).map((edu) => (
                        <div class="education-item">
                          <h4>{edu.title}</h4>
                          {edu.subtitle && <p class="education-school">{edu.subtitle}</p>}
                          {edu.date_range && <p class="education-dates">{edu.date_range}</p>}
                          <div set:html={edu.description || edu.details || 'No details available'} />
                        </div>
                      ))}
                      {(!groupedSections.education || groupedSections.education.length === 0) && (
                        <div class="education-item">
                          <h4>Bachelor of Commerce</h4>
                          <p class="education-school">University Studies</p>
                          <p class="education-dates">Completed</p>
                          <p>Focus on Information Systems and Business Management</p>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Achievements Item -->
          <div class="expandable-item" data-card-type="resume" data-section="achievements">
            <div class="item-header">
              <span class="item-emoji">üèÜ</span>
              <div class="item-content-header">
                <h3 class="item-title">Key Achievements</h3>
                <p class="item-subtitle">Professional accomplishments</p>
              </div>
              <button class="close-button" aria-label="Close expanded view">‚úï</button>
            </div>
            <div class="item-content">
              <div class="item-content-inner">
                <div class="content-section">
                  <h4 class="section-title">Professional Accomplishments</h4>
                  <div class="section-content">
                    <div class="achievements-grid">
                      {(groupedSections.certifications || []).map((achievement) => (
                        <div class="achievement-item">
                          <h4>{achievement.title}</h4>
                          {achievement.subtitle && <p class="achievement-subtitle">{achievement.subtitle}</p>}
                          <div set:html={achievement.description || achievement.details || 'No details available'} />
                        </div>
                      ))}
                      {(!groupedSections.certifications || groupedSections.certifications.length === 0) && (
                        <div class="achievement-item">
                          <h4>Key Achievements</h4>
                          <ul>
                            <li>Led major NetSuite ERP migration project</li>
                            <li>Automated onboarding/offboarding processes</li>
                            <li>Implemented security and compliance frameworks</li>
                            <li>Doubled client leads through strategic marketing</li>
                          </ul>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        </>
        )}
    </div>
  
  <script define:vars={{ groupedSections, stats }}>
    console.log('Resume page with inline expansion starting...');
    
    class ResumeExpansionManager {
      constructor() {
        this.currentlyExpanded = null;
        this.init();
        this.animateStats();
      }
      
      init() {
        // Handle card and job clicks
        document.addEventListener('click', (e) => {
          // Handle job toggle buttons
          if (e.target.classList.contains('job-toggle')) {
            e.preventDefault();
            e.stopPropagation();
            const jobIndex = e.target.getAttribute('data-job-index');
            this.toggleJob(jobIndex, e.target);
            return;
          }
          
          // Handle job header clicks (exclude toggle button)
          if (e.target.closest('.job-header') && !e.target.closest('.job-toggle')) {
            e.preventDefault();
            e.stopPropagation();
            const jobIndex = e.target.closest('.job-header').getAttribute('data-job-index');
            const toggleBtn = document.querySelector(`[data-job-index="${jobIndex}"].job-toggle`);
            this.toggleJob(jobIndex, toggleBtn);
            return;
          }
          
          // Handle main item interactions
          const item = e.target.closest('.expandable-item');
          if (!item) return;
          
          // Handle close button
          if (e.target.closest('.close-button')) {
            e.preventDefault();
            e.stopPropagation();
            this.collapseItem(item);
            return;
          }
          
          // Handle header clicks
          if (e.target.closest('.item-header') && !e.target.closest('.close-button')) {
            e.preventDefault();
            this.toggleItem(item);
            return;
          }
          
          // Don't interfere with links in expanded content
          if (e.target.closest('.item-content a')) {
            return;
          }
        });
        
        // Handle escape key
        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape' && this.currentlyExpanded) {
            this.collapseItem(this.currentlyExpanded);
          }
        });
        
        console.log('Resume expansion manager initialized');
      }
      
      animateStats() {
        // Animate stats on page load
        setTimeout(() => {
          this.animateValue(document.getElementById('years-exp'), 0, stats.years, 1000);
          this.animateValue(document.getElementById('companies-count'), 0, stats.companies, 1000);
          this.animateValue(document.getElementById('roles-count'), 0, stats.roles, 1000);
        }, 500);
      }
      
      animateValue(element, start, end, duration) {
        if (!element) return;
        const range = end - start;
        const increment = range / (duration / 30);
        let current = start;
        
        const timer = setInterval(function() {
          current += increment;
          if (current >= end) {
            current = end;
            clearInterval(timer);
          }
          element.textContent = Math.floor(current);
        }, 30);
      }
      
      toggleItem(item) {
        if (item.classList.contains('expanded')) {
          this.collapseItem(item);
        } else {
          this.expandItem(item);
        }
      }
      
      expandItem(item) {
        // Collapse any currently expanded item
        if (this.currentlyExpanded && this.currentlyExpanded !== item) {
          this.collapseItem(this.currentlyExpanded);
        }
        
        // Expand the new item
        item.classList.add('expanded');
        this.currentlyExpanded = item;
        
        // Scroll to item
        setTimeout(() => {
          item.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start' 
          });
        }, 200);
        
        console.log('Expanded resume item:', item.getAttribute('data-section'));
      }
      
      collapseItem(item) {
        item.classList.remove('expanded');
        if (this.currentlyExpanded === item) {
          this.currentlyExpanded = null;
        }
        
        // Collapse any expanded jobs in this item
        const expandedJobs = item.querySelectorAll('.job-item.expanded');
        expandedJobs.forEach(job => {
          job.classList.remove('expanded');
          const toggle = job.querySelector('.job-toggle');
          if (toggle) toggle.textContent = '+';
        });
        
        console.log('Collapsed resume item:', item.getAttribute('data-section'));
      }
      
      toggleJob(jobIndex, toggleBtn) {
        const jobDetails = document.getElementById(`job-details-${jobIndex}`);
        const jobItem = toggleBtn.closest('.job-item');
        
        if (!jobDetails || !jobItem) return;
        
        if (jobItem.classList.contains('expanded')) {
          jobItem.classList.remove('expanded');
          toggleBtn.textContent = '+';
          console.log('Collapsed job:', jobIndex);
        } else {
          jobItem.classList.add('expanded');
          toggleBtn.textContent = '‚àí';
          console.log('Expanded job:', jobIndex);
        }
      }
    }
    
    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        new ResumeExpansionManager();
      });
    } else {
      new ResumeExpansionManager();
    }
  </script>
    
  <style>
    #resume-dashboard {
      max-width: 800px;
      margin: 0 auto;
      padding: 40px 20px;
    }
    
    .error-message {
      text-align: center;
      color: var(--color-error, #dc3545);
      padding: 2rem;
      background-color: var(--color-error-bg, #f8d7da);
      border-radius: 0.5rem;
      margin: 2rem 0;
    }
    
    /* Mobile adjustments */
    @media (max-width: 768px) {
      #resume-dashboard {
        padding: 20px 10px;
      }
    }
  </style>
</BaseLayout>
