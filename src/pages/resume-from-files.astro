---
import BaseLayout from '../layouts/BaseLayout.astro';
import fs from 'fs';
import path from 'path';

// Read resume data from JSON files
const resumeDir = path.join(process.cwd(), 'src/content/resume');
let resumeData = {
    experience: [],
    skills: [],
    education: [],
    certifications: []
};
let error = null;

try {
    const resumeDataPath = path.join(resumeDir, 'resume-data.json');
    if (fs.existsSync(resumeDataPath)) {
        const data = JSON.parse(fs.readFileSync(resumeDataPath, 'utf8'));
        resumeData = { ...resumeData, ...data };
    }
} catch (err) {
    console.error('Error loading resume data:', err);
    error = err.message;
}

// Calculate stats
let stats = { years: 0, companies: 0, roles: 0 };

if (resumeData.experience && resumeData.experience.length > 0) {
    let companies = new Set();
    let totalExperienceMonths = 0;

    resumeData.experience.forEach(job => {
        if (job.subtitle) {
            let company = job.subtitle;
            if (company.includes(' - ')) {
                company = company.split(' - ')[0];
            } else if (company.includes(' at ')) {
                company = company.split(' at ').pop();
            }
            companies.add(company.trim());
        }
        
        if (job.date_range) {
            const duration = calculateJobDuration(job.date_range);
            totalExperienceMonths += duration;
        }
    });

    stats = {
        years: Math.floor(totalExperienceMonths / 12),
        companies: companies.size,
        roles: resumeData.experience.length
    };
}

function calculateJobDuration(dateRange) {
    try {
        const parts = dateRange.toLowerCase().split(' - ');
        if (parts.length !== 2) return 12;
        
        const startPart = parts[0].trim();
        const endPart = parts[1].trim();
        
        let startYear, startMonth = 0;
        if (startPart.match(/^\d{4}$/)) {
            startYear = parseInt(startPart);
        } else {
            const startMatch = startPart.match(/(\w+)\s+(\d{4})/);
            if (startMatch) {
                startYear = parseInt(startMatch[2]);
                startMonth = getMonthNumber(startMatch[1]);
            }
        }
        
        let endYear, endMonth = 11;
        if (endPart === 'present' || endPart === 'current') {
            endYear = new Date().getFullYear();
            endMonth = new Date().getMonth();
        } else if (endPart.match(/^\d{4}$/)) {
            endYear = parseInt(endPart);
        } else {
            const endMatch = endPart.match(/(\w+)\s+(\d{4})/);
            if (endMatch) {
                endYear = parseInt(endMatch[2]);
                endMonth = getMonthNumber(endMatch[1]);
            }
        }
        
        if (startYear && endYear) {
            const months = (endYear - startYear) * 12 + (endMonth - startMonth);
            return Math.max(months, 1);
        }
        
        return 12;
    } catch (error) {
        return 12;
    }
}

function getMonthNumber(monthName) {
    const months = {
        'jan': 0, 'january': 0, 'feb': 1, 'february': 1, 'mar': 2, 'march': 2,
        'apr': 3, 'april': 3, 'may': 4, 'jun': 5, 'june': 5, 'jul': 6, 'july': 6,
        'aug': 7, 'august': 7, 'sep': 8, 'september': 8, 'oct': 9, 'october': 9,
        'nov': 10, 'november': 10, 'dec': 11, 'december': 11
    };
    return months[monthName.toLowerCase()] || 0;
}
---

<BaseLayout title="Resume - Nadav Moskow">
    <style>
        #resume-page {
            max-width: 1000px;
            margin: 0 auto;
            padding: 40px 20px;
        }

        /* Header Section */
        .resume-header {
            text-align: center;
            margin-bottom: 40px;
            padding-bottom: 30px;
            border-bottom: 2px solid var(--border-color);
        }

        .resume-header h1 {
            font-size: 2.5em;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 10px;
        }

        .resume-subtitle {
            font-size: 1.1em;
            color: var(--text-secondary);
            margin-bottom: 30px;
        }

        /* Stats Bar */
        .stats-bar {
            display: flex;
            justify-content: center;
            gap: 40px;
            margin-bottom: 30px;
        }

        .stat {
            text-align: center;
        }

        .stat-number {
            font-size: 2.5em;
            font-weight: 700;
            color: var(--link-color);
            display: block;
            margin-bottom: 5px;
        }

        .stat-label {
            font-size: 0.9em;
            color: var(--text-secondary);
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        /* Download Button */
        .download-btn {
            background: var(--link-color);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            display: inline-flex;
            align-items: center;
            gap: 10px;
            text-decoration: none;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .download-btn:hover {
            background: var(--link-hover);
            transform: translateY(-2px);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        }

        /* Tab Navigation */
        .tab-nav {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-bottom: 40px;
            border-bottom: 2px solid var(--border-color);
            padding-bottom: 0;
        }

        .tab-button {
            background: none;
            border: none;
            padding: 15px 30px;
            color: var(--text-secondary);
            font-size: 1em;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
            border-radius: 8px 8px 0 0;
            font-family: inherit;
        }

        .tab-button:hover {
            color: var(--text-primary);
            background: var(--bg-secondary);
        }

        .tab-button.active {
            color: var(--link-color);
            background: var(--bg-primary);
        }

        .tab-button.active::after {
            content: '';
            position: absolute;
            bottom: -2px;
            left: 0;
            right: 0;
            height: 3px;
            background: var(--link-color);
        }

        .tab-icon {
            display: inline-block;
            margin-right: 8px;
            font-size: 1.2em;
        }

        /* Tab Content */
        .tab-content {
            display: none;
            animation: fadeIn 0.4s ease;
        }

        .tab-content.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Timeline Style for Experience */
        .timeline {
            position: relative;
            padding-left: 40px;
        }

        .timeline::before {
            content: '';
            position: absolute;
            left: 10px;
            top: 0;
            bottom: 0;
            width: 2px;
            background: var(--border-color);
        }

        .timeline-item {
            position: relative;
            margin-bottom: 40px;
            background: var(--bg-secondary);
            padding: 25px;
            border-radius: 8px;
            border: 1px solid var(--border-color);
            transition: all 0.3s ease;
        }

        .timeline-item:hover {
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            transform: translateX(5px);
        }

        .timeline-item::before {
            content: '';
            position: absolute;
            left: -34px;
            top: 30px;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: var(--link-color);
            border: 3px solid var(--bg-primary);
            z-index: 1;
        }

        .timeline-header {
            margin-bottom: 15px;
        }

        .timeline-title {
            font-size: 1.3em;
            font-weight: 600;
            color: var(--text-primary);
            margin: 0 0 8px 0;
        }

        .timeline-subtitle {
            font-size: 1em;
            color: var(--link-color);
            font-weight: 500;
            margin: 0 0 5px 0;
        }

        .timeline-date {
            font-size: 0.9em;
            color: var(--text-secondary);
            font-style: italic;
        }

        .timeline-content {
            color: var(--text-primary);
            line-height: 1.6;
        }

        .timeline-content ul {
            margin: 10px 0;
            padding-left: 20px;
        }

        .timeline-content li {
            margin: 8px 0;
        }

        /* Skills Grid */
        .skills-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
        }

        .skill-category {
            background: var(--bg-secondary);
            padding: 20px;
            border-radius: 8px;
            border: 1px solid var(--border-color);
            transition: all 0.3s ease;
        }

        .skill-category:hover {
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            transform: translateY(-2px);
        }

        .skill-category h3 {
            font-size: 1.1em;
            font-weight: 600;
            color: var(--text-primary);
            margin: 0 0 15px 0;
            padding-bottom: 10px;
            border-bottom: 2px solid var(--link-color);
        }

        .skill-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }

        .skill-tag {
            background: var(--link-color);
            color: white;
            padding: 6px 12px;
            border-radius: 15px;
            font-size: 0.85em;
            font-weight: 500;
        }

        /* Mobile Responsiveness */
        @media (max-width: 768px) {
            #resume-page { padding: 20px 15px; }
            .resume-header h1 { font-size: 2em; }
            .stats-bar { gap: 20px; }
            .stat-number { font-size: 2em; }
            .tab-nav { flex-wrap: wrap; gap: 5px; }
            .tab-button { padding: 10px 15px; font-size: 0.9em; flex: 1; min-width: 100px; }
            .tab-icon { display: none; }
            .timeline { padding-left: 30px; }
            .timeline-item { padding: 20px; }
            .skills-grid { grid-template-columns: 1fr; }
        }
    </style>
    
    <div id="resume-page">
        {error ? (
            <div class="error-message">
                <p>Error loading resume data: {error}</p>
            </div>
        ) : (
            <>
                <!-- Resume Header -->
                <div class="resume-header">
                    <h1>Nadav Moskow</h1>
                    <p class="resume-subtitle">Full Stack Developer | Problem Solver | Tech Enthusiast</p>
                    
                    <!-- Stats Bar -->
                    <div class="stats-bar">
                        <div class="stat">
                            <span class="stat-number" id="years-stat">{stats.years}</span>
                            <span class="stat-label">Years Experience</span>
                        </div>
                        <div class="stat">
                            <span class="stat-number" id="companies-stat">{stats.companies}</span>
                            <span class="stat-label">Companies</span>
                        </div>
                        <div class="stat">
                            <span class="stat-number" id="roles-stat">{stats.roles}</span>
                            <span class="stat-label">Roles</span>
                        </div>
                    </div>
                    
                    <!-- Download Button -->
                    <a href="/images/Nadav Moskow - Resume.pdf" target="_blank" download class="download-btn">
                        <span>📄</span>
                        Download PDF Resume
                    </a>
                </div>

                <!-- Tab Navigation -->
                <div class="tab-nav">
                    <button class="tab-button active" data-tab="experience">
                        <span class="tab-icon">💼</span>
                        Experience
                    </button>
                    <button class="tab-button" data-tab="skills">
                        <span class="tab-icon">🛠️</span>
                        Skills
                    </button>
                    <button class="tab-button" data-tab="education">
                        <span class="tab-icon">🎓</span>
                        Education
                    </button>
                    <button class="tab-button" data-tab="achievements">
                        <span class="tab-icon">🏆</span>
                        Achievements
                    </button>
                </div>

                <!-- Tab Contents -->
                <div class="tab-contents">
                    <!-- Experience Tab -->
                    <div class="tab-content active" id="experience-tab">
                        <div class="timeline">
                            {resumeData.experience.map((job) => (
                                <div class="timeline-item">
                                    <div class="timeline-header">
                                        <h3 class="timeline-title">{job.title}</h3>
                                        <p class="timeline-subtitle">{job.subtitle}</p>
                                        <p class="timeline-date">{job.date_range}</p>
                                    </div>
                                    <div class="timeline-content" set:html={job.description || job.details || 'No description available'} />
                                </div>
                            ))}
                        </div>
                    </div>

                    <!-- Skills Tab -->
                    <div class="tab-content" id="skills-tab">
                        <div class="skills-grid">
                            {resumeData.skills.map((skill) => (
                                <div class="skill-category">
                                    <h3>{skill.title}</h3>
                                    <div class="skill-tags">
                                        {(skill.description || skill.details || '').split(',').map(item => (
                                            <span class="skill-tag">{item.trim()}</span>
                                        ))}
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>

                    <!-- Education Tab -->
                    <div class="tab-content" id="education-tab">
                        <div class="education-grid">
                            {resumeData.education.map((edu) => (
                                <div class="education-card">
                                    <h3 class="education-title">{edu.title}</h3>
                                    {edu.subtitle && <p class="education-school">{edu.subtitle}</p>}
                                    {edu.date_range && <p class="education-date">{edu.date_range}</p>}
                                    <div class="education-description" set:html={edu.description || edu.details || ''} />
                                </div>
                            ))}
                        </div>
                    </div>

                    <!-- Achievements Tab -->
                    <div class="tab-content" id="achievements-tab">
                        <div class="achievements-grid">
                            {resumeData.certifications.map((achievement) => (
                                <div class="achievement-card">
                                    <h3 class="achievement-title">{achievement.title}</h3>
                                    <div class="achievement-description" set:html={achievement.description || achievement.details || achievement.subtitle || ''} />
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
            </>
        )}
    </div>

    <script>
        // Same tab functionality as before...
        document.addEventListener('DOMContentLoaded', function() {
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabContents = document.querySelectorAll('.tab-content');

            tabButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const targetTab = this.dataset.tab;
                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    tabContents.forEach(content => content.classList.remove('active'));
                    this.classList.add('active');
                    document.getElementById(`${targetTab}-tab`)?.classList.add('active');
                });
            });

            // Handle hash navigation
            function handleHashNavigation() {
                const hash = window.location.hash.slice(1).toLowerCase();
                if (hash) {
                    const tabMap = {
                        'experience': 'experience', 'skills': 'skills', 'education': 'education',
                        'courses': 'achievements', 'achievements': 'achievements'
                    };
                    const targetTab = tabMap[hash];
                    if (targetTab) {
                        document.querySelector(`[data-tab="${targetTab}"]`)?.click();
                    }
                }
            }

            handleHashNavigation();
            window.addEventListener('hashchange', handleHashNavigation);

            // Animate stats
            function animateValue(element, start, end, duration) {
                if (!element) return;
                const range = end - start;
                const increment = range / (duration / 30);
                let current = start;
                
                const timer = setInterval(function() {
                    current += increment;
                    if (current >= end) {
                        current = end;
                        clearInterval(timer);
                    }
                    element.textContent = Math.floor(current);
                }, 30);
            }

            const yearsEl = document.getElementById('years-stat');
            const companiesEl = document.getElementById('companies-stat');
            const rolesEl = document.getElementById('roles-stat');

            if (yearsEl && companiesEl && rolesEl) {
                const years = parseInt(yearsEl.textContent);
                const companies = parseInt(companiesEl.textContent);
                const roles = parseInt(rolesEl.textContent);

                yearsEl.textContent = '0';
                companiesEl.textContent = '0';
                rolesEl.textContent = '0';

                setTimeout(() => {
                    animateValue(yearsEl, 0, years, 800);
                    animateValue(companiesEl, 0, companies, 800);
                    animateValue(rolesEl, 0, roles, 800);
                }, 200);
            }
        });
    </script>
</BaseLayout>