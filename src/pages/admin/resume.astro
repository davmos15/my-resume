---
import AdminLayout from '../../layouts/AdminLayout.astro';
import { allAsync } from '../../lib/db.js';

// This will be handled by middleware for auth check
let sections = [];
try {
  sections = await allAsync('SELECT * FROM resume_sections ORDER BY section_type, display_order');
} catch (error) {
  console.error('Error loading resume sections:', error);
  sections = [];
}

const sectionTypes = ['experience', 'education', 'skills', 'certifications'];
---

<AdminLayout title="Resume" activePage="resume">
  <h1 class="page-title">Resume Management</h1>

  <!-- Success/Error Messages -->
  <div id="messageContainer" class="message-container" style="display: none;"></div>

  <!-- Add New Section Form -->
  <div class="card">
    <h2>Add New Resume Section</h2>
    <form id="resumeForm" class="resume-form">
      <div class="form-row">
        <div class="form-group">
          <label for="section_type">Section Type *</label>
          <select id="section_type" name="section_type" required>
            <option value="">Select Type</option>
            {sectionTypes.map(type => (
              <option value={type}>{type.charAt(0).toUpperCase() + type.slice(1)}</option>
            ))}
          </select>
        </div>
        <div class="form-group">
          <label for="title">Title *</label>
          <input type="text" id="title" name="title" required>
        </div>
      </div>
      
      <div class="form-row">
        <div class="form-group">
          <label for="subtitle">Subtitle</label>
          <input type="text" id="subtitle" name="subtitle" placeholder="Company/Institution">
        </div>
        <div class="form-group">
          <label for="date_range">Date Range</label>
          <input type="text" id="date_range" name="date_range" placeholder="Jan 2020 - Present">
        </div>
      </div>
      
      <div class="form-group">
        <label for="description">Description</label>
        <textarea id="description" name="description" rows="4"></textarea>
      </div>
      
      <div class="form-group">
        <label for="details">Details (HTML supported)</label>
        <textarea id="details" name="details" rows="6"></textarea>
      </div>
      
      <div class="form-row">
        <div class="form-group">
          <label for="display_order">Display Order</label>
          <input type="number" id="display_order" name="display_order" min="0" value="0">
        </div>
        <div class="form-group">
          <label>
            <input type="checkbox" id="is_active" name="is_active" checked>
            Active
          </label>
        </div>
      </div>
      
      <button type="submit" class="btn btn-success">Add Section</button>
      <button type="button" id="cancelEdit" class="btn btn-secondary" style="display: none;">Cancel Edit</button>
    </form>
  </div>

  <!-- Sections List -->
  <div class="card">
    <h2>Resume Sections</h2>
    <div class="sections-grid">
      {sectionTypes.map(type => (
        <div class="section-group">
          <h3>{type.charAt(0).toUpperCase() + type.slice(1)}</h3>
          <div class="section-list">
            {sections.filter(s => s.section_type === type).map(section => (
              <div class="section-item" data-id={section.id}>
                <div class="section-header">
                  <h4>{section.title}</h4>
                  {section.subtitle && <p class="subtitle">{section.subtitle}</p>}
                  {section.date_range && <p class="date-range">{section.date_range}</p>}
                </div>
                <div class="section-actions">
                  <button class="btn btn-primary btn-sm edit-btn" data-id={section.id}>Edit</button>
                  <button class="btn btn-danger btn-sm delete-btn" data-id={section.id}>Delete</button>
                  <span class={section.is_active ? 'status-active' : 'status-inactive'}>
                    {section.is_active ? 'Active' : 'Inactive'}
                  </span>
                </div>
              </div>
            ))}
          </div>
        </div>
      ))}
    </div>
  </div>
</AdminLayout>

<style>
.page-title {
  margin-bottom: 2rem;
  color: #2c3e50;
}

.card {
  background: white;
  border-radius: 8px;
  padding: 2rem;
  margin-bottom: 2rem;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.resume-form {
  max-width: 800px;
}

.form-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
}

.form-group {
  margin-bottom: 1rem;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
  color: #555;
}

.form-group input,
.form-group textarea,
.form-group select {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 0.9rem;
}

.sections-grid {
  display: grid;
  gap: 2rem;
}

.section-group h3 {
  margin-bottom: 1rem;
  color: #3498db;
}

.section-list {
  display: grid;
  gap: 1rem;
}

.section-item {
  background: #f8f9fa;
  padding: 1rem;
  border-radius: 4px;
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
}

.section-header h4 {
  margin: 0 0 0.5rem 0;
}

.subtitle,
.date-range {
  margin: 0.25rem 0;
  color: #666;
  font-size: 0.9rem;
}

.section-actions {
  display: flex;
  gap: 0.5rem;
  align-items: center;
}

.btn {
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.9rem;
  font-weight: 500;
  transition: all 0.2s;
}

.btn-sm {
  padding: 0.5rem 1rem;
  font-size: 0.8rem;
}

.btn-success {
  background-color: #27ae60;
  color: white;
}

.btn-success:hover {
  background-color: #229954;
}

.btn-primary {
  background-color: #3498db;
  color: white;
}

.btn-primary:hover {
  background-color: #2980b9;
}

.btn-danger {
  background-color: #e74c3c;
  color: white;
}

.btn-danger:hover {
  background-color: #c0392b;
}

.btn-secondary {
  background-color: #95a5a6;
  color: white;
}

.status-active {
  color: #27ae60;
  font-weight: 500;
}

.status-inactive {
  color: #e74c3c;
  font-weight: 500;
}

.message-container {
  margin-bottom: 1rem;
  padding: 1rem;
  border-radius: 4px;
  font-weight: 500;
}

.message-success {
  background-color: #d4edda;
  color: #155724;
  border: 1px solid #c3e6cb;
}

.message-error {
  background-color: #f8d7da;
  color: #721c24;
  border: 1px solid #f5c6cb;
}
</style>

<script>
let editingSectionId = null;

document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('resumeForm');
  form.addEventListener('submit', handleFormSubmit);

  // Edit and delete buttons
  document.addEventListener('click', function(e) {
    if (e.target.classList.contains('edit-btn')) {
      const sectionId = e.target.getAttribute('data-id');
      editSection(sectionId);
    }
    
    if (e.target.classList.contains('delete-btn')) {
      const sectionId = e.target.getAttribute('data-id');
      deleteSection(sectionId);
    }
  });

  // Cancel edit button
  document.getElementById('cancelEdit').addEventListener('click', function() {
    resetForm();
  });
});

async function handleFormSubmit(e) {
  e.preventDefault();
  
  const formData = new FormData(e.target);
  const data = {
    section_type: formData.get('section_type'),
    title: formData.get('title'),
    subtitle: formData.get('subtitle'),
    date_range: formData.get('date_range'),
    description: formData.get('description'),
    details: formData.get('details'),
    display_order: parseInt(formData.get('display_order')) || 0,
    is_active: formData.get('is_active') ? 1 : 0
  };
  
  try {
    let response;
    
    if (editingSectionId) {
      response = await fetch(`/api/resume/${editingSectionId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
      });
    } else {
      response = await fetch('/api/resume/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
      });
    }
    
    const result = await response.json();
    
    if (response.ok) {
      showMessage(result.message || 'Resume section saved successfully', 'success');
      resetForm();
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    } else {
      // Handle authentication errors specifically
      if (response.status === 401) {
        showMessage('Session expired. Please log in again.', 'error');
        setTimeout(() => {
          window.location.href = '/admin/login';
        }, 2000);
      } else {
        showMessage(result.error || 'Failed to save resume section', 'error');
      }
    }
    
  } catch (error) {
    console.error('Error saving resume section:', error);
    showMessage('Network error. Please check your connection and try again.', 'error');
  }
}

async function editSection(sectionId) {
  try {
    const response = await fetch(`/api/resume/${sectionId}`);
    const section = await response.json();
    
    if (response.ok) {
      document.getElementById('section_type').value = section.section_type || '';
      document.getElementById('title').value = section.title || '';
      document.getElementById('subtitle').value = section.subtitle || '';
      document.getElementById('date_range').value = section.date_range || '';
      document.getElementById('description').value = section.description || '';
      document.getElementById('details').value = section.details || '';
      document.getElementById('display_order').value = section.display_order || 0;
      document.getElementById('is_active').checked = section.is_active;
      
      editingSectionId = sectionId;
      document.querySelector('form button[type="submit"]').textContent = 'Update Section';
      document.getElementById('cancelEdit').style.display = 'inline-block';
      
      document.querySelector('.resume-form').scrollIntoView({ behavior: 'smooth' });
    } else {
      showMessage(section.error || 'Failed to load section', 'error');
    }
  } catch (error) {
    console.error('Error loading section:', error);
    showMessage('Error loading section', 'error');
  }
}

async function deleteSection(sectionId) {
  if (!confirm('Are you sure you want to delete this section?')) {
    return;
  }
  
  try {
    const response = await fetch(`/api/resume/${sectionId}`, {
      method: 'DELETE'
    });
    
    const result = await response.json();
    
    if (response.ok) {
      showMessage(result.message || 'Section deleted successfully', 'success');
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    } else {
      showMessage(result.error || 'Failed to delete section', 'error');
    }
  } catch (error) {
    console.error('Error deleting section:', error);
    showMessage('Error deleting section', 'error');
  }
}

function resetForm() {
  document.getElementById('resumeForm').reset();
  editingSectionId = null;
  document.querySelector('form button[type="submit"]').textContent = 'Add Section';
  document.getElementById('cancelEdit').style.display = 'none';
}

function showMessage(message, type) {
  const container = document.getElementById('messageContainer');
  container.textContent = message;
  container.className = `message-container message-${type}`;
  container.style.display = 'block';
  
  setTimeout(() => {
    container.style.display = 'none';
  }, 5000);
}
</script>
</AdminLayout>