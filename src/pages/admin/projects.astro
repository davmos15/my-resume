---
import AdminLayout from '../../layouts/AdminLayout.astro';
import { allAsync } from '../../lib/db.js';

// This will be handled by middleware for auth check
let projects = [];
try {
  projects = await allAsync('SELECT * FROM projects ORDER BY display_order, id DESC');
} catch (error) {
  console.error('Error loading projects:', error);
  projects = [];
}
---

<AdminLayout title="Projects" activePage="projects">
  <h1 class="page-title">Projects</h1>

  <!-- Success/Error Messages -->
  <div id="messageContainer" class="message-container" style="display: none;"></div>

  <!-- Add New Project Form -->
  <div class="card">
    <h2>Add New Project</h2>
    <form id="projectForm" class="project-form admin-form">
      <div class="form-row">
        <div class="form-group">
          <label for="title">Title *</label>
          <input type="text" id="title" name="title" required>
        </div>
        <div class="form-group">
          <label for="emoji">Emoji</label>
          <input type="text" id="emoji" name="emoji" placeholder="ðŸš€" maxlength="4">
        </div>
      </div>
      
      <div class="form-group">
        <label for="subtitle">Subtitle</label>
        <input type="text" id="subtitle" name="subtitle">
      </div>
      
      <div class="form-group">
        <label for="description">Description *</label>
        <textarea id="description" name="description" rows="4" required></textarea>
      </div>
      
      <div class="form-group">
        <label for="technologies">Technologies *</label>
        <input type="text" id="technologies" name="technologies" placeholder="React, Node.js, MongoDB" required>
      </div>
      
      <div class="form-row">
        <div class="form-group">
          <label for="github_link">GitHub Link</label>
          <input type="text" id="github_link" name="github_link">
        </div>
        <div class="form-group">
          <label for="live_link">Live Link</label>
          <input type="text" id="live_link" name="live_link">
        </div>
      </div>
      
      <div class="form-row">
        <div class="form-group">
          <label for="image_path">Image Path</label>
          <input type="text" id="image_path" name="image_path" placeholder="/images/project.jpg">
        </div>
        <div class="form-group">
          <label for="display_order">Display Order</label>
          <input type="number" id="display_order" name="display_order" min="0" value="0">
        </div>
      </div>
      
      <div class="form-group">
        <label>
          <input type="checkbox" id="is_active" name="is_active" checked>
          Active (Show on public site)
        </label>
      </div>
      
      <button type="submit" class="btn btn-success">Add Project</button>
      <button type="button" id="cancelEdit" class="btn btn-secondary" style="display: none;">Cancel Edit</button>
    </form>
  </div>

  <!-- Projects List -->
  <div class="card">
    <div class="sortable-table">
      <table class="table">
        <thead>
          <tr>
            <th width="30px">â‹®â‹®</th>
            <th>Title</th>
            <th>Technologies</th>
            <th>Status</th>
            <th>Order</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="sortable-projects">
          {projects && projects.length > 0 ? (
            projects.map((project) => (
              <tr data-id={project.id} class="sortable-row">
                <td class="drag-handle" style="cursor: move;">â‹®â‹®</td>
                <td>{project.emoji || 'ðŸš€'} {project.title}</td>
                <td>{project.technologies || 'N/A'}</td>
                <td>
                  <span class={project.is_active ? 'status-active' : 'status-inactive'}>
                    {project.is_active ? 'Active' : 'Inactive'}
                  </span>
                </td>
                <td>{project.display_order}</td>
                <td>
                  <div class="actions">
                    <button class="btn btn-primary btn-sm edit-btn" data-id={project.id}>Edit</button>
                    <button class="btn btn-danger btn-sm delete-btn" data-id={project.id}>Delete</button>
                  </div>
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colspan="6" style="text-align: center;">No projects found</td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  </div>
</AdminLayout>

<style>
.page-title {
  margin-bottom: 2rem;
  color: #2c3e50;
}

.card {
  background: white;
  border-radius: 8px;
  padding: 2rem;
  margin-bottom: 2rem;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.card h2 {
  margin-bottom: 1.5rem;
  color: #2c3e50;
}

.project-form {
  max-width: 800px;
}

.form-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
}

.form-group {
  margin-bottom: 1rem;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
  color: #555;
}

.form-group input,
.form-group textarea {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 0.9rem;
  background-color: white !important;
  color: black !important;
}

.form-group input:focus,
.form-group textarea:focus {
  outline: none;
  border-color: #3498db;
  box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);
}

.form-group input[type="checkbox"] {
  width: auto;
  margin-right: 0.5rem;
}

.btn {
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.9rem;
  font-weight: 500;
  text-decoration: none;
  display: inline-block;
  transition: all 0.2s;
}

.btn-success {
  background-color: #27ae60;
  color: white;
}

.btn-success:hover {
  background-color: #229954;
}

.btn-primary {
  background-color: #3498db;
  color: white;
}

.btn-primary:hover {
  background-color: #2980b9;
}

.btn-danger {
  background-color: #e74c3c;
  color: white;
}

.btn-danger:hover {
  background-color: #c0392b;
}

.btn-secondary {
  background-color: #95a5a6;
  color: white;
}

.btn-secondary:hover {
  background-color: #7f8c8d;
}

.btn-sm {
  padding: 0.5rem 1rem;
  font-size: 0.8rem;
}

.table {
  width: 100%;
  border-collapse: collapse;
}

.table th,
.table td {
  padding: 1rem;
  text-align: left;
  border-bottom: 1px solid #eee;
}

.table th {
  background-color: #f8f9fa;
  font-weight: 600;
  color: #555;
}

.sortable-row {
  cursor: move;
}

.sortable-row:hover {
  background-color: #f8f9fa;
}

.drag-handle {
  color: #999;
  user-select: none;
}

.sortable-ghost {
  opacity: 0.4;
}

.sortable-chosen {
  background-color: #e3f2fd !important;
}

.status-active {
  color: #27ae60;
  font-weight: 500;
}

.status-inactive {
  color: #e74c3c;
  font-weight: 500;
}

.actions {
  display: flex;
  gap: 0.5rem;
}

.message-container {
  margin-bottom: 1rem;
  padding: 1rem;
  border-radius: 4px;
  font-weight: 500;
}

.message-success {
  background-color: #d4edda;
  color: #155724;
  border: 1px solid #c3e6cb;
}

.message-error {
  background-color: #f8d7da;
  color: #721c24;
  border: 1px solid #f5c6cb;
}

@media (max-width: 768px) {
  .form-row {
    grid-template-columns: 1fr;
  }
  
  .actions {
    flex-direction: column;
  }
  
  .table {
    font-size: 0.8rem;
  }
  
  .table th,
  .table td {
    padding: 0.5rem;
  }
}
</style>

<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
<script>
let editingProjectId = null;

document.addEventListener('DOMContentLoaded', function() {
  // Initialize sortable table
  const element = document.getElementById('sortable-projects');
  if (element) {
    new Sortable(element, {
      handle: '.drag-handle',
      animation: 150,
      ghostClass: 'sortable-ghost',
      chosenClass: 'sortable-chosen',
      onEnd: function(evt) {
        updateOrder(evt.to);
      }
    });
  }

  // Form submission
  const form = document.getElementById('projectForm');
  form.addEventListener('submit', handleFormSubmit);
  
  // Initialize rich text editors for any textareas
  const textareas = document.querySelectorAll('#projectForm textarea');
  textareas.forEach(textarea => {
    if (window.initRichTextEditor) {
      window.initRichTextEditor(textarea);
    }
  });

  // Edit buttons
  document.addEventListener('click', function(e) {
    if (e.target.classList.contains('edit-btn')) {
      const projectId = e.target.getAttribute('data-id');
      editProject(projectId);
    }
    
    if (e.target.classList.contains('delete-btn')) {
      const projectId = e.target.getAttribute('data-id');
      deleteProject(projectId);
    }
  });

  // Cancel edit button
  document.getElementById('cancelEdit').addEventListener('click', function() {
    resetForm();
  });
});

async function handleFormSubmit(e) {
  e.preventDefault();
  
  const formData = new FormData(e.target);
  const data = Object.fromEntries(formData.entries());
  
  // Handle checkbox - if not checked, it won't be in FormData
  data.is_active = formData.get('is_active') === 'on';
  
  try {
    let response;
    
    if (editingProjectId) {
      // Update existing project
      response = await fetch(`/api/projects/${editingProjectId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
      });
    } else {
      // Create new project
      response = await fetch('/api/projects/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
      });
    }
    
    const result = await response.json();
    
    if (response.ok) {
      showMessage(result.message || 'Project saved successfully', 'success');
      resetForm();
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    } else {
      showMessage(result.error || 'Failed to save project', 'error');
    }
    
  } catch (error) {
    console.error('Error saving project:', error);
    showMessage('Error saving project', 'error');
  }
}

async function editProject(projectId) {
  try {
    const response = await fetch(`/api/projects/${projectId}`);
    const project = await response.json();
    
    if (response.ok) {
      // Populate form with project data
      document.getElementById('title').value = project.title || '';
      document.getElementById('emoji').value = project.emoji || '';
      document.getElementById('subtitle').value = project.subtitle || '';
      document.getElementById('description').value = project.description || '';
      document.getElementById('technologies').value = project.technologies || '';
      document.getElementById('github_link').value = project.github_link || '';
      document.getElementById('live_link').value = project.live_link || '';
      document.getElementById('image_path').value = project.image_path || '';
      document.getElementById('display_order').value = project.display_order || 0;
      document.getElementById('is_active').checked = project.is_active === 1 || project.is_active === true;
      
      editingProjectId = projectId;
      document.querySelector('form button[type="submit"]').textContent = 'Update Project';
      document.getElementById('cancelEdit').style.display = 'inline-block';
      
      // Scroll to form
      document.querySelector('.project-form').scrollIntoView({ behavior: 'smooth' });
    } else {
      showMessage(project.error || 'Failed to load project', 'error');
    }
  } catch (error) {
    console.error('Error loading project:', error);
    showMessage('Error loading project', 'error');
  }
}

async function deleteProject(projectId) {
  if (!confirm('Are you sure you want to delete this project?')) {
    return;
  }
  
  try {
    const response = await fetch(`/api/projects/${projectId}`, {
      method: 'DELETE'
    });
    
    const result = await response.json();
    
    if (response.ok) {
      showMessage(result.message || 'Project deleted successfully', 'success');
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    } else {
      showMessage(result.error || 'Failed to delete project', 'error');
    }
  } catch (error) {
    console.error('Error deleting project:', error);
    showMessage('Error deleting project', 'error');
  }
}

async function updateOrder(container) {
  const rows = container.querySelectorAll('tr[data-id]');
  const updates = Array.from(rows).map((row, index) => ({
    id: row.dataset.id,
    display_order: index
  }));

  try {
    const response = await fetch('/api/projects/reorder', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ updates })
    });

    if (!response.ok) {
      throw new Error('Failed to update order');
    }

    // Update the display order in the UI
    rows.forEach((row, index) => {
      const orderCell = row.querySelector('td:nth-child(5)');
      if (orderCell) {
        orderCell.textContent = index;
      }
    });

  } catch (error) {
    console.error('Error updating order:', error);
    showMessage('Failed to update order. Please refresh the page.', 'error');
  }
}

function resetForm() {
  document.getElementById('projectForm').reset();
  editingProjectId = null;
  document.querySelector('form button[type="submit"]').textContent = 'Add Project';
  document.getElementById('cancelEdit').style.display = 'none';
}

function showMessage(message, type) {
  const container = document.getElementById('messageContainer');
  container.textContent = message;
  container.className = `message-container message-${type}`;
  container.style.display = 'block';
  
  setTimeout(() => {
    container.style.display = 'none';
  }, 5000);
}
</script>
</AdminLayout>